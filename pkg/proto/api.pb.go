// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.14.0
// source: api.proto

package proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DataType int32

const (
	DataType_address          DataType = 0  // Address
	DataType_barcode          DataType = 1  // Barcode
	DataType_contact          DataType = 2  // Contact
	DataType_currency         DataType = 3  // Currency
	DataType_customer         DataType = 4  // Customer
	DataType_deffield         DataType = 5  // Deffield
	DataType_employee         DataType = 6  // Employee
	DataType_event            DataType = 7  // Event
	DataType_fieldvalue       DataType = 8  // Fieldvalue
	DataType_groups           DataType = 9  // Groups
	DataType_item             DataType = 10 // Item
	DataType_link             DataType = 11 // Link
	DataType_log              DataType = 12 // Log
	DataType_movement         DataType = 13 // Movement
	DataType_numberdef        DataType = 14 // Numberdef
	DataType_pattern          DataType = 15 // Pattern
	DataType_payment          DataType = 16 // Payment
	DataType_place            DataType = 17 // Place
	DataType_price            DataType = 18 // Price
	DataType_product          DataType = 19 // Product
	DataType_project          DataType = 20 // Project
	DataType_rate             DataType = 21 // Rate
	DataType_tax              DataType = 22 // Tax
	DataType_tool             DataType = 23 // Tool
	DataType_trans            DataType = 24 // Trans
	DataType_ui_audit         DataType = 25 // UiAudit
	DataType_ui_language      DataType = 26 // UiLanguage
	DataType_ui_menu          DataType = 27 // UiMenu
	DataType_ui_menufields    DataType = 28 // UiMenufields
	DataType_ui_message       DataType = 29 // UiMessage
	DataType_ui_printqueue    DataType = 30 // UiPrintqueue
	DataType_ui_report        DataType = 31 // UiReport
	DataType_ui_reportfields  DataType = 32 // UiReportfields
	DataType_ui_reportsources DataType = 33 // UiReportsources
	DataType_ui_userconfig    DataType = 34 // UiUserconfig
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0:  "address",
		1:  "barcode",
		2:  "contact",
		3:  "currency",
		4:  "customer",
		5:  "deffield",
		6:  "employee",
		7:  "event",
		8:  "fieldvalue",
		9:  "groups",
		10: "item",
		11: "link",
		12: "log",
		13: "movement",
		14: "numberdef",
		15: "pattern",
		16: "payment",
		17: "place",
		18: "price",
		19: "product",
		20: "project",
		21: "rate",
		22: "tax",
		23: "tool",
		24: "trans",
		25: "ui_audit",
		26: "ui_language",
		27: "ui_menu",
		28: "ui_menufields",
		29: "ui_message",
		30: "ui_printqueue",
		31: "ui_report",
		32: "ui_reportfields",
		33: "ui_reportsources",
		34: "ui_userconfig",
	}
	DataType_value = map[string]int32{
		"address":          0,
		"barcode":          1,
		"contact":          2,
		"currency":         3,
		"customer":         4,
		"deffield":         5,
		"employee":         6,
		"event":            7,
		"fieldvalue":       8,
		"groups":           9,
		"item":             10,
		"link":             11,
		"log":              12,
		"movement":         13,
		"numberdef":        14,
		"pattern":          15,
		"payment":          16,
		"place":            17,
		"price":            18,
		"product":          19,
		"project":          20,
		"rate":             21,
		"tax":              22,
		"tool":             23,
		"trans":            24,
		"ui_audit":         25,
		"ui_language":      26,
		"ui_menu":          27,
		"ui_menufields":    28,
		"ui_message":       29,
		"ui_printqueue":    30,
		"ui_report":        31,
		"ui_reportfields":  32,
		"ui_reportsources": 33,
		"ui_userconfig":    34,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[0].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[0]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

type ReportOrientation int32

const (
	ReportOrientation_portrait  ReportOrientation = 0
	ReportOrientation_landscape ReportOrientation = 1
)

// Enum value maps for ReportOrientation.
var (
	ReportOrientation_name = map[int32]string{
		0: "portrait",
		1: "landscape",
	}
	ReportOrientation_value = map[string]int32{
		"portrait":  0,
		"landscape": 1,
	}
)

func (x ReportOrientation) Enum() *ReportOrientation {
	p := new(ReportOrientation)
	*p = x
	return p
}

func (x ReportOrientation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportOrientation) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[1].Descriptor()
}

func (ReportOrientation) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[1]
}

func (x ReportOrientation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportOrientation.Descriptor instead.
func (ReportOrientation) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

type ReportSize int32

const (
	ReportSize_a3     ReportSize = 0
	ReportSize_a4     ReportSize = 1
	ReportSize_a5     ReportSize = 2
	ReportSize_letter ReportSize = 3
	ReportSize_legal  ReportSize = 4
)

// Enum value maps for ReportSize.
var (
	ReportSize_name = map[int32]string{
		0: "a3",
		1: "a4",
		2: "a5",
		3: "letter",
		4: "legal",
	}
	ReportSize_value = map[string]int32{
		"a3":     0,
		"a4":     1,
		"a5":     2,
		"letter": 3,
		"legal":  4,
	}
)

func (x ReportSize) Enum() *ReportSize {
	p := new(ReportSize)
	*p = x
	return p
}

func (x ReportSize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportSize) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[2].Descriptor()
}

func (ReportSize) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[2]
}

func (x ReportSize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportSize.Descriptor instead.
func (ReportSize) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

type ReportOutput int32

const (
	ReportOutput_auto ReportOutput = 0
	ReportOutput_xml  ReportOutput = 1
	ReportOutput_data ReportOutput = 2
)

// Enum value maps for ReportOutput.
var (
	ReportOutput_name = map[int32]string{
		0: "auto",
		1: "xml",
		2: "data",
	}
	ReportOutput_value = map[string]int32{
		"auto": 0,
		"xml":  1,
		"data": 2,
	}
)

func (x ReportOutput) Enum() *ReportOutput {
	p := new(ReportOutput)
	*p = x
	return p
}

func (x ReportOutput) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportOutput) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[3].Descriptor()
}

func (ReportOutput) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[3]
}

func (x ReportOutput) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportOutput.Descriptor instead.
func (ReportOutput) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

type RequestReport_ReportType int32

const (
	RequestReport_none     RequestReport_ReportType = 0
	RequestReport_customer RequestReport_ReportType = 1
	RequestReport_employee RequestReport_ReportType = 2
	RequestReport_event    RequestReport_ReportType = 3
	RequestReport_place    RequestReport_ReportType = 4
	RequestReport_product  RequestReport_ReportType = 5
	RequestReport_project  RequestReport_ReportType = 6
	RequestReport_tool     RequestReport_ReportType = 7
	RequestReport_trans    RequestReport_ReportType = 8
)

// Enum value maps for RequestReport_ReportType.
var (
	RequestReport_ReportType_name = map[int32]string{
		0: "none",
		1: "customer",
		2: "employee",
		3: "event",
		4: "place",
		5: "product",
		6: "project",
		7: "tool",
		8: "trans",
	}
	RequestReport_ReportType_value = map[string]int32{
		"none":     0,
		"customer": 1,
		"employee": 2,
		"event":    3,
		"place":    4,
		"product":  5,
		"project":  6,
		"tool":     7,
		"trans":    8,
	}
)

func (x RequestReport_ReportType) Enum() *RequestReport_ReportType {
	p := new(RequestReport_ReportType)
	*p = x
	return p
}

func (x RequestReport_ReportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestReport_ReportType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[4].Descriptor()
}

func (RequestReport_ReportType) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[4]
}

func (x RequestReport_ReportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestReport_ReportType.Descriptor instead.
func (RequestReport_ReportType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{23, 0}
}

type ResponseRows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ResponseRows_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ResponseRows) Reset() {
	*x = ResponseRows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseRows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseRows) ProtoMessage() {}

func (x *ResponseRows) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseRows.ProtoReflect.Descriptor instead.
func (*ResponseRows) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

func (x *ResponseRows) GetItems() []*ResponseRows_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

// No parameters
type RequestEmpty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestEmpty) Reset() {
	*x = RequestEmpty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestEmpty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestEmpty) ProtoMessage() {}

func (x *RequestEmpty) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestEmpty.ProtoReflect.Descriptor instead.
func (*RequestEmpty) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

// Does not return content.
type ResponseEmpty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResponseEmpty) Reset() {
	*x = ResponseEmpty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseEmpty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseEmpty) ProtoMessage() {}

func (x *ResponseEmpty) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseEmpty.ProtoReflect.Descriptor instead.
func (*ResponseEmpty) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

type RequestUserLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Employee username or Customer custnumber (email or phone number)
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// Optional. Default value: NT_DEFAULT_ALIAS
	Database string `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *RequestUserLogin) Reset() {
	*x = RequestUserLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestUserLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestUserLogin) ProtoMessage() {}

func (x *RequestUserLogin) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestUserLogin.ProtoReflect.Descriptor instead.
func (*RequestUserLogin) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

func (x *RequestUserLogin) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RequestUserLogin) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RequestUserLogin) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type ResponseUserLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token  string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`   // Access JWT token
	Engine string `protobuf:"bytes,2,opt,name=engine,proto3" json:"engine,omitempty"` // Type of database
}

func (x *ResponseUserLogin) Reset() {
	*x = ResponseUserLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseUserLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseUserLogin) ProtoMessage() {}

func (x *ResponseUserLogin) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseUserLogin.ProtoReflect.Descriptor instead.
func (*ResponseUserLogin) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

func (x *ResponseUserLogin) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ResponseUserLogin) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

type RequestTokenDecode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"` // Access token code.
}

func (x *RequestTokenDecode) Reset() {
	*x = RequestTokenDecode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestTokenDecode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTokenDecode) ProtoMessage() {}

func (x *RequestTokenDecode) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTokenDecode.ProtoReflect.Descriptor instead.
func (*RequestTokenDecode) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

func (x *RequestTokenDecode) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Access token claims.
type ResponseTokenDecode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string  `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Database string  `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	Exp      float64 `protobuf:"fixed64,3,opt,name=exp,proto3" json:"exp,omitempty"` // JWT expiration time
	Iss      string  `protobuf:"bytes,4,opt,name=iss,proto3" json:"iss,omitempty"`
}

func (x *ResponseTokenDecode) Reset() {
	*x = ResponseTokenDecode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTokenDecode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTokenDecode) ProtoMessage() {}

func (x *ResponseTokenDecode) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTokenDecode.ProtoReflect.Descriptor instead.
func (*ResponseTokenDecode) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

func (x *ResponseTokenDecode) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ResponseTokenDecode) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *ResponseTokenDecode) GetExp() float64 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *ResponseTokenDecode) GetIss() string {
	if x != nil {
		return x.Iss
	}
	return ""
}

type ResponseTokenRefresh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"` // Access token code.
}

func (x *ResponseTokenRefresh) Reset() {
	*x = ResponseTokenRefresh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTokenRefresh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTokenRefresh) ProtoMessage() {}

func (x *ResponseTokenRefresh) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTokenRefresh.ProtoReflect.Descriptor instead.
func (*ResponseTokenRefresh) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

func (x *ResponseTokenRefresh) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Token user properties
type ResponseTokenLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username   string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Empnumber  string `protobuf:"bytes,3,opt,name=empnumber,proto3" json:"empnumber,omitempty"`
	Usergroup  int64  `protobuf:"varint,4,opt,name=usergroup,proto3" json:"usergroup,omitempty"`
	Scope      string `protobuf:"bytes,5,opt,name=scope,proto3" json:"scope,omitempty"`
	Department string `protobuf:"bytes,6,opt,name=department,proto3" json:"department,omitempty"`
}

func (x *ResponseTokenLogin) Reset() {
	*x = ResponseTokenLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTokenLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTokenLogin) ProtoMessage() {}

func (x *ResponseTokenLogin) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTokenLogin.ProtoReflect.Descriptor instead.
func (*ResponseTokenLogin) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8}
}

func (x *ResponseTokenLogin) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ResponseTokenLogin) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ResponseTokenLogin) GetEmpnumber() string {
	if x != nil {
		return x.Empnumber
	}
	return ""
}

func (x *ResponseTokenLogin) GetUsergroup() int64 {
	if x != nil {
		return x.Usergroup
	}
	return 0
}

func (x *ResponseTokenLogin) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ResponseTokenLogin) GetDepartment() string {
	if x != nil {
		return x.Department
	}
	return ""
}

type RequestUserPassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New password
	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	// New password confirmation
	Confirm string `protobuf:"bytes,2,opt,name=confirm,proto3" json:"confirm,omitempty"`
	// Optional. Only if different from the logged in user. Admin user group membership required.
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// Optional. Only if different from the logged in user. Admin user group membership required.
	Custnumber string `protobuf:"bytes,4,opt,name=custnumber,proto3" json:"custnumber,omitempty"`
}

func (x *RequestUserPassword) Reset() {
	*x = RequestUserPassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestUserPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestUserPassword) ProtoMessage() {}

func (x *RequestUserPassword) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestUserPassword.ProtoReflect.Descriptor instead.
func (*RequestUserPassword) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{9}
}

func (x *RequestUserPassword) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RequestUserPassword) GetConfirm() string {
	if x != nil {
		return x.Confirm
	}
	return ""
}

func (x *RequestUserPassword) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RequestUserPassword) GetCustnumber() string {
	if x != nil {
		return x.Custnumber
	}
	return ""
}

// New database props.
type RequestDatabaseCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Alias name of the database
	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	// Create a DEMO database
	Demo bool `protobuf:"varint,2,opt,name=demo,proto3" json:"demo,omitempty"`
}

func (x *RequestDatabaseCreate) Reset() {
	*x = RequestDatabaseCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestDatabaseCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDatabaseCreate) ProtoMessage() {}

func (x *RequestDatabaseCreate) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestDatabaseCreate.ProtoReflect.Descriptor instead.
func (*RequestDatabaseCreate) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10}
}

func (x *RequestDatabaseCreate) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *RequestDatabaseCreate) GetDemo() bool {
	if x != nil {
		return x.Demo
	}
	return false
}

// Result log data
type ResponseDatabaseCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *ResponseRows `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ResponseDatabaseCreate) Reset() {
	*x = ResponseDatabaseCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseDatabaseCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseDatabaseCreate) ProtoMessage() {}

func (x *ResponseDatabaseCreate) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseDatabaseCreate.ProtoReflect.Descriptor instead.
func (*ResponseDatabaseCreate) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11}
}

func (x *ResponseDatabaseCreate) GetDetails() *ResponseRows {
	if x != nil {
		return x.Details
	}
	return nil
}

// Delete parameters
type RequestDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nervatype DataType `protobuf:"varint,1,opt,name=nervatype,proto3,enum=nervatura.DataType" json:"nervatype,omitempty"`
	// The object ID
	Id int64 `protobuf:"varint,36,opt,name=id,proto3" json:"id,omitempty"`
	// Use Key instead of ID
	Key string `protobuf:"bytes,37,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *RequestDelete) Reset() {
	*x = RequestDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDelete) ProtoMessage() {}

func (x *RequestDelete) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestDelete.ProtoReflect.Descriptor instead.
func (*RequestDelete) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12}
}

func (x *RequestDelete) GetNervatype() DataType {
	if x != nil {
		return x.Nervatype
	}
	return DataType_address
}

func (x *RequestDelete) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RequestDelete) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// Only "select" queries and functions can be executed. Changes to the data are not saved in the database.
type RequestView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The array of Query object
	Options []*RequestView_Query `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *RequestView) Reset() {
	*x = RequestView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestView) ProtoMessage() {}

func (x *RequestView) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestView.ProtoReflect.Descriptor instead.
func (*RequestView) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{13}
}

func (x *RequestView) GetOptions() []*RequestView_Query {
	if x != nil {
		return x.Options
	}
	return nil
}

type ResponseView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key - results map
	Values map[string]*ResponseRows `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ResponseView) Reset() {
	*x = ResponseView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseView) ProtoMessage() {}

func (x *ResponseView) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseView.ProtoReflect.Descriptor instead.
func (*ResponseView) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{14}
}

func (x *ResponseView) GetValues() map[string]*ResponseRows {
	if x != nil {
		return x.Values
	}
	return nil
}

type RequestField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*RequestField_Boolean
	//	*RequestField_Number
	//	*RequestField_Text
	Value isRequestField_Value `protobuf_oneof:"value"`
}

func (x *RequestField) Reset() {
	*x = RequestField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestField) ProtoMessage() {}

func (x *RequestField) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestField.ProtoReflect.Descriptor instead.
func (*RequestField) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{15}
}

func (m *RequestField) GetValue() isRequestField_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *RequestField) GetBoolean() bool {
	if x, ok := x.GetValue().(*RequestField_Boolean); ok {
		return x.Boolean
	}
	return false
}

func (x *RequestField) GetNumber() float64 {
	if x, ok := x.GetValue().(*RequestField_Number); ok {
		return x.Number
	}
	return 0
}

func (x *RequestField) GetText() string {
	if x, ok := x.GetValue().(*RequestField_Text); ok {
		return x.Text
	}
	return ""
}

type isRequestField_Value interface {
	isRequestField_Value()
}

type RequestField_Boolean struct {
	Boolean bool `protobuf:"varint,1,opt,name=boolean,proto3,oneof"`
}

type RequestField_Number struct {
	Number float64 `protobuf:"fixed64,2,opt,name=number,proto3,oneof"`
}

type RequestField_Text struct {
	Text string `protobuf:"bytes,3,opt,name=text,proto3,oneof"`
}

func (*RequestField_Boolean) isRequestField_Value() {}

func (*RequestField_Number) isRequestField_Value() {}

func (*RequestField_Text) isRequestField_Value() {}

type RequestFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server function name
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The array of parameter values
	Values map[string]*RequestField `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RequestFunction) Reset() {
	*x = RequestFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestFunction) ProtoMessage() {}

func (x *RequestFunction) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestFunction.ProtoReflect.Descriptor instead.
func (*RequestFunction) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{16}
}

func (x *RequestFunction) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RequestFunction) GetValues() map[string]*RequestField {
	if x != nil {
		return x.Values
	}
	return nil
}

type ResponseFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ResponseFunction) Reset() {
	*x = ResponseFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseFunction) ProtoMessage() {}

func (x *ResponseFunction) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseFunction.ProtoReflect.Descriptor instead.
func (*ResponseFunction) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{17}
}

func (x *ResponseFunction) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type RequestReportList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *RequestReportList) Reset() {
	*x = RequestReportList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestReportList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestReportList) ProtoMessage() {}

func (x *RequestReportList) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestReportList.ProtoReflect.Descriptor instead.
func (*RequestReportList) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{18}
}

func (x *RequestReportList) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// Returns all installable files from the NT_REPORT_DIR directory (empty value: all available built-in Nervatura Reports)
type ResponseReportList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ResponseReportList_Info `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ResponseReportList) Reset() {
	*x = ResponseReportList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseReportList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseReportList) ProtoMessage() {}

func (x *ResponseReportList) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseReportList.ProtoReflect.Descriptor instead.
func (*ResponseReportList) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{19}
}

func (x *ResponseReportList) GetItems() []*ResponseReportList_Info {
	if x != nil {
		return x.Items
	}
	return nil
}

//
//Admin user group membership required.
type RequestReportInstall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Example : ntr_invoice_en
	Reportkey string `protobuf:"bytes,1,opt,name=reportkey,proto3" json:"reportkey,omitempty"`
}

func (x *RequestReportInstall) Reset() {
	*x = RequestReportInstall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestReportInstall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestReportInstall) ProtoMessage() {}

func (x *RequestReportInstall) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestReportInstall.ProtoReflect.Descriptor instead.
func (*RequestReportInstall) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{20}
}

func (x *RequestReportInstall) GetReportkey() string {
	if x != nil {
		return x.Reportkey
	}
	return ""
}

type ResponseReportInstall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Returns a new report ID.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ResponseReportInstall) Reset() {
	*x = ResponseReportInstall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseReportInstall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseReportInstall) ProtoMessage() {}

func (x *ResponseReportInstall) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseReportInstall.ProtoReflect.Descriptor instead.
func (*ResponseReportInstall) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{21}
}

func (x *ResponseReportInstall) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RequestReportDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Example : ntr_invoice_en
	Reportkey string `protobuf:"bytes,1,opt,name=reportkey,proto3" json:"reportkey,omitempty"`
}

func (x *RequestReportDelete) Reset() {
	*x = RequestReportDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestReportDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestReportDelete) ProtoMessage() {}

func (x *RequestReportDelete) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestReportDelete.ProtoReflect.Descriptor instead.
func (*RequestReportDelete) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{22}
}

func (x *RequestReportDelete) GetReportkey() string {
	if x != nil {
		return x.Reportkey
	}
	return ""
}

type RequestReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Example : ntr_invoice_en
	Reportkey   string                   `protobuf:"bytes,1,opt,name=reportkey,proto3" json:"reportkey,omitempty"`
	Orientation ReportOrientation        `protobuf:"varint,2,opt,name=orientation,proto3,enum=nervatura.ReportOrientation" json:"orientation,omitempty"`
	Size        ReportSize               `protobuf:"varint,3,opt,name=size,proto3,enum=nervatura.ReportSize" json:"size,omitempty"`
	Output      ReportOutput             `protobuf:"varint,4,opt,name=output,proto3,enum=nervatura.ReportOutput" json:"output,omitempty"`
	Type        RequestReport_ReportType `protobuf:"varint,5,opt,name=type,proto3,enum=nervatura.RequestReport_ReportType" json:"type,omitempty"`
	// Example : DMINV/00001
	Refnumber string                   `protobuf:"bytes,6,opt,name=refnumber,proto3" json:"refnumber,omitempty"`
	Filters   map[string]*RequestField `protobuf:"bytes,7,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RequestReport) Reset() {
	*x = RequestReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestReport) ProtoMessage() {}

func (x *RequestReport) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestReport.ProtoReflect.Descriptor instead.
func (*RequestReport) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{23}
}

func (x *RequestReport) GetReportkey() string {
	if x != nil {
		return x.Reportkey
	}
	return ""
}

func (x *RequestReport) GetOrientation() ReportOrientation {
	if x != nil {
		return x.Orientation
	}
	return ReportOrientation_portrait
}

func (x *RequestReport) GetSize() ReportSize {
	if x != nil {
		return x.Size
	}
	return ReportSize_a3
}

func (x *RequestReport) GetOutput() ReportOutput {
	if x != nil {
		return x.Output
	}
	return ReportOutput_auto
}

func (x *RequestReport) GetType() RequestReport_ReportType {
	if x != nil {
		return x.Type
	}
	return RequestReport_none
}

func (x *RequestReport) GetRefnumber() string {
	if x != nil {
		return x.Refnumber
	}
	return ""
}

func (x *RequestReport) GetFilters() map[string]*RequestField {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ResponseReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ResponseReport) Reset() {
	*x = ResponseReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseReport) ProtoMessage() {}

func (x *ResponseReport) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseReport.ProtoReflect.Descriptor instead.
func (*ResponseReport) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{24}
}

func (x *ResponseReport) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type RequestUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nervatype DataType              `protobuf:"varint,1,opt,name=nervatype,proto3,enum=nervatura.DataType" json:"nervatype,omitempty"`
	Items     []*RequestUpdate_Item `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *RequestUpdate) Reset() {
	*x = RequestUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestUpdate) ProtoMessage() {}

func (x *RequestUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestUpdate.ProtoReflect.Descriptor instead.
func (*RequestUpdate) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{25}
}

func (x *RequestUpdate) GetNervatype() DataType {
	if x != nil {
		return x.Nervatype
	}
	return DataType_address
}

func (x *RequestUpdate) GetItems() []*RequestUpdate_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

// If the ID (or Key) value is missing, it creates a new item.
type ResponseUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Returns the all new/updated IDs values.
	Values []int64 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *ResponseUpdate) Reset() {
	*x = ResponseUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseUpdate) ProtoMessage() {}

func (x *ResponseUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseUpdate.ProtoReflect.Descriptor instead.
func (*ResponseUpdate) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{26}
}

func (x *ResponseUpdate) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type RequestGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nervatype DataType `protobuf:"varint,1,opt,name=nervatype,proto3,enum=nervatura.DataType" json:"nervatype,omitempty"`
	Metadata  bool     `protobuf:"varint,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Ids       []int64  `protobuf:"varint,3,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Filters   []string `protobuf:"bytes,7,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *RequestGet) Reset() {
	*x = RequestGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestGet) ProtoMessage() {}

func (x *RequestGet) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestGet.ProtoReflect.Descriptor instead.
func (*RequestGet) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{27}
}

func (x *RequestGet) GetNervatype() DataType {
	if x != nil {
		return x.Nervatype
	}
	return DataType_address
}

func (x *RequestGet) GetMetadata() bool {
	if x != nil {
		return x.Metadata
	}
	return false
}

func (x *RequestGet) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *RequestGet) GetFilters() []string {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ResponseGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*ResponseGet_Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ResponseGet) Reset() {
	*x = ResponseGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseGet) ProtoMessage() {}

func (x *ResponseGet) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseGet.ProtoReflect.Descriptor instead.
func (*ResponseGet) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{28}
}

func (x *ResponseGet) GetValues() []*ResponseGet_Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type MetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Reference to [Deffield](#deffield).fieldname.
	Fieldname string `protobuf:"bytes,2,opt,name=fieldname,proto3" json:"fieldname,omitempty"`
	// Reference to [Deffield](#deffield).fieldtype.
	Fieldtype string `protobuf:"bytes,3,opt,name=fieldtype,proto3" json:"fieldtype,omitempty"`
	Value     string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Notes     string `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *MetaData) Reset() {
	*x = MetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaData) ProtoMessage() {}

func (x *MetaData) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaData.ProtoReflect.Descriptor instead.
func (*MetaData) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{29}
}

func (x *MetaData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MetaData) GetFieldname() string {
	if x != nil {
		return x.Fieldname
	}
	return ""
}

func (x *MetaData) GetFieldtype() string {
	if x != nil {
		return x.Fieldtype
	}
	return ""
}

func (x *MetaData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *MetaData) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: Value is a generated unique key identifier: *{nervatype}/{refnumber}~{rownumber}*. The *rownumber* is the order of multiple *{nervatype}/{refnumber}* keys. For example: ```customer/DMCUST/00001~1```
//
//- ```nervatype```: Valid values: *customer, employee, event, place, product, project, tool, trans*
//
//- ```ref_id```: Valid values: *customer/{custnumber}, employee/{empnumber}, event/{calnumber}, place/{planumber}, product/{partnumber},
//project/{pronumber}, tool/{serial}, trans/{transnumber}*
//
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'nervatype')
	Nervatype int64 `protobuf:"varint,2,opt,name=nervatype,proto3" json:"nervatype,omitempty"`
	// Reference to [Customer](#customer).id, [Employee](#employee).id, [Event](#event).id, [Place](#place).id, [Product](#product).id, [Project](#project).id, [Tool](#tool).id, [Trans](#trans).id
	RefId   int64  `protobuf:"varint,3,opt,name=ref_id,json=refId,proto3" json:"ref_id,omitempty"`
	Country string `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	State   string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Zipcode string `protobuf:"bytes,6,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
	City    string `protobuf:"bytes,7,opt,name=city,proto3" json:"city,omitempty"`
	Street  string `protobuf:"bytes,8,opt,name=street,proto3" json:"street,omitempty"`
	Notes   string `protobuf:"bytes,9,opt,name=notes,proto3" json:"notes,omitempty"`
	// Address meta data
	Metadata []*MetaData `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{30}
}

func (x *Address) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Address) GetNervatype() int64 {
	if x != nil {
		return x.Nervatype
	}
	return 0
}

func (x *Address) GetRefId() int64 {
	if x != nil {
		return x.RefId
	}
	return 0
}

func (x *Address) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Address) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Address) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *Address) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Address) GetMetadata() []*MetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: Barcode *code*
//
//- ```barcodetype```: Valid values: *AZTEC, CODABAR, CODE_128, CODE_39, CODE_93, DATA_MATRIX, EAN_13, EAN_8, ITF, MSI, PDF417, QR_CODE, RSS_EXPANDED, RSS14, UPC_A, UPC_E*
//
//- ```product_id```: Product *partnumber*
type Barcode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Each product can be connected to any number of bar codes, but the code must remain unique to ensure that the product is clearly identifiable.
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// Reference to [Product](#product).id
	ProductId int64 `protobuf:"varint,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// Comment related to the barcode. Informal, has no role in identification.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Reference to [Groups](#groups).id  (only where groupname = 'barcodetype').
	Barcodetype int64 `protobuf:"varint,5,opt,name=barcodetype,proto3" json:"barcodetype,omitempty"`
	// The actual amount of the products identified by the barcode. For example can be used for packaged goods, tray packaging.
	Qty float64 `protobuf:"fixed64,6,opt,name=qty,proto3" json:"qty,omitempty"`
	// If more than one bar code is assigned, this will be the default. Because of the uniqueness of the barcode the product is always clearly identifiable, but in reverse case (eg. in case the barcode should be printed on a document) we must assign one being the default for that product.
	Defcode bool `protobuf:"varint,7,opt,name=defcode,proto3" json:"defcode,omitempty"`
}

func (x *Barcode) Reset() {
	*x = Barcode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Barcode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Barcode) ProtoMessage() {}

func (x *Barcode) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Barcode.ProtoReflect.Descriptor instead.
func (*Barcode) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{31}
}

func (x *Barcode) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Barcode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Barcode) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *Barcode) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Barcode) GetBarcodetype() int64 {
	if x != nil {
		return x.Barcodetype
	}
	return 0
}

func (x *Barcode) GetQty() float64 {
	if x != nil {
		return x.Qty
	}
	return 0
}

func (x *Barcode) GetDefcode() bool {
	if x != nil {
		return x.Defcode
	}
	return false
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: The value is a generated constant key identifier: *{nervatype}/{refnumber}~{rownumber}*. The rownumber is the order of multiple *{nervatype}/{refnumber}* keys.
//
//- ```nervatype```: Valid values: *customer, employee, event, place, product, project, tool, trans*
//
//- ```ref_id```: Valid values: *customer/{custnumber}, employee/{empnumber}, event/{calnumber}, place/{planumber}, product/{partnumber}, project/{pronumber}, tool/{serial}, trans/{transnumber}*
type Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'nervatype')
	Nervatype int64 `protobuf:"varint,2,opt,name=nervatype,proto3" json:"nervatype,omitempty"`
	// Reference to [Customer](#customer).id, [Employee](#employee).id, [Event](#event).id, [Place](#place).id, [Product](#product).id, [Project](#project).id, [Tool](#tool).id, [Trans](#trans).id
	RefId     int64  `protobuf:"varint,3,opt,name=ref_id,json=refId,proto3" json:"ref_id,omitempty"`
	Firstname string `protobuf:"bytes,4,opt,name=firstname,proto3" json:"firstname,omitempty"`
	Surname   string `protobuf:"bytes,5,opt,name=surname,proto3" json:"surname,omitempty"`
	Status    string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Phone     string `protobuf:"bytes,7,opt,name=phone,proto3" json:"phone,omitempty"`
	Fax       string `protobuf:"bytes,8,opt,name=fax,proto3" json:"fax,omitempty"`
	Mobil     string `protobuf:"bytes,9,opt,name=mobil,proto3" json:"mobil,omitempty"`
	Email     string `protobuf:"bytes,10,opt,name=email,proto3" json:"email,omitempty"`
	Notes     string `protobuf:"bytes,11,opt,name=notes,proto3" json:"notes,omitempty"`
	// Contact meta data
	Metadata []*MetaData `protobuf:"bytes,12,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Contact) Reset() {
	*x = Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact) ProtoMessage() {}

func (x *Contact) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact.ProtoReflect.Descriptor instead.
func (*Contact) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{32}
}

func (x *Contact) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Contact) GetNervatype() int64 {
	if x != nil {
		return x.Nervatype
	}
	return 0
}

func (x *Contact) GetRefId() int64 {
	if x != nil {
		return x.RefId
	}
	return 0
}

func (x *Contact) GetFirstname() string {
	if x != nil {
		return x.Firstname
	}
	return ""
}

func (x *Contact) GetSurname() string {
	if x != nil {
		return x.Surname
	}
	return ""
}

func (x *Contact) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Contact) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Contact) GetFax() string {
	if x != nil {
		return x.Fax
	}
	return ""
}

func (x *Contact) GetMobil() string {
	if x != nil {
		return x.Mobil
	}
	return ""
}

func (x *Contact) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Contact) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Contact) GetMetadata() []*MetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: Currency *curr*
type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ISO 4217 code of the currency.
	Curr string `protobuf:"bytes,2,opt,name=curr,proto3" json:"curr,omitempty"`
	// The name of the currency.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The number of decimal places used for recording and rounding by the program. Default: 2
	Digit int64 `protobuf:"varint,4,opt,name=digit,proto3" json:"digit,omitempty"`
	// Default Rate. You can specify an exchange rate vs. the default currency, which will be used by the reports.
	Defrate float64 `protobuf:"fixed64,5,opt,name=defrate,proto3" json:"defrate,omitempty"`
	// Rounding value for cash. Could be used in case the smallest banknote in circulation for that certain currency is not 1.
	Cround int64 `protobuf:"varint,6,opt,name=cround,proto3" json:"cround,omitempty"`
	// Currency meta data
	Metadata []*MetaData `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{33}
}

func (x *Currency) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Currency) GetCurr() string {
	if x != nil {
		return x.Curr
	}
	return ""
}

func (x *Currency) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Currency) GetDigit() int64 {
	if x != nil {
		return x.Digit
	}
	return 0
}

func (x *Currency) GetDefrate() float64 {
	if x != nil {
		return x.Defrate
	}
	return 0
}

func (x *Currency) GetCround() int64 {
	if x != nil {
		return x.Cround
	}
	return 0
}

func (x *Currency) GetMetadata() []*MetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: Customer *custnumber*
//
//- ```custtype```: Valid values: *own, company, private, other*
type Customer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'custtype')
	Custtype int64 `protobuf:"varint,2,opt,name=custtype,proto3" json:"custtype,omitempty"`
	// Unique ID. If you set it to numberdef, it will be generated at the first data save. The format and value of the next data in row is taken from the numberdef (numberkey = custnumber) data series.
	Custnumber string `protobuf:"bytes,3,opt,name=custnumber,proto3" json:"custnumber,omitempty"`
	// Full name of the customer
	Custname  string `protobuf:"bytes,4,opt,name=custname,proto3" json:"custname,omitempty"`
	Taxnumber string `protobuf:"bytes,5,opt,name=taxnumber,proto3" json:"taxnumber,omitempty"`
	Account   string `protobuf:"bytes,6,opt,name=account,proto3" json:"account,omitempty"`
	// Tax-free
	Notax bool `protobuf:"varint,7,opt,name=notax,proto3" json:"notax,omitempty"`
	// Payment per.
	Terms int64 `protobuf:"varint,8,opt,name=terms,proto3" json:"terms,omitempty"`
	// Customer's credit limit. Data is used by financial reports.
	Creditlimit float64 `protobuf:"fixed64,9,opt,name=creditlimit,proto3" json:"creditlimit,omitempty"`
	// If new product line is added (offer, order, invoice etc.) all products will receive the discount percentage specified in this field. If the product has a separate customer price, the value specified here will not be considered by the program.
	Discount float64 `protobuf:"fixed64,10,opt,name=discount,proto3" json:"discount,omitempty"`
	Notes    string  `protobuf:"bytes,11,opt,name=notes,proto3" json:"notes,omitempty"`
	Inactive bool    `protobuf:"varint,12,opt,name=inactive,proto3" json:"inactive,omitempty"`
	// Customer meta data
	Metadata []*MetaData `protobuf:"bytes,13,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Customer) Reset() {
	*x = Customer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Customer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Customer) ProtoMessage() {}

func (x *Customer) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Customer.ProtoReflect.Descriptor instead.
func (*Customer) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{34}
}

func (x *Customer) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Customer) GetCusttype() int64 {
	if x != nil {
		return x.Custtype
	}
	return 0
}

func (x *Customer) GetCustnumber() string {
	if x != nil {
		return x.Custnumber
	}
	return ""
}

func (x *Customer) GetCustname() string {
	if x != nil {
		return x.Custname
	}
	return ""
}

func (x *Customer) GetTaxnumber() string {
	if x != nil {
		return x.Taxnumber
	}
	return ""
}

func (x *Customer) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Customer) GetNotax() bool {
	if x != nil {
		return x.Notax
	}
	return false
}

func (x *Customer) GetTerms() int64 {
	if x != nil {
		return x.Terms
	}
	return 0
}

func (x *Customer) GetCreditlimit() float64 {
	if x != nil {
		return x.Creditlimit
	}
	return 0
}

func (x *Customer) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *Customer) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Customer) GetInactive() bool {
	if x != nil {
		return x.Inactive
	}
	return false
}

func (x *Customer) GetMetadata() []*MetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: Deffield *fieldname*
//
//- ```nervatype```: Valid values: *address, barcode, contact, currency, customer, employee, event, item, link, log, movement, payment, price, place, product, project, rate, tax, tool, trans, setting*
//
//- ```subtype```: All groupvalue from Groups, where groupname equal *custtype, placetype, protype, toolgroup, transtype*
//
//- ```fieldtype```: Valid values: *bool, date, time, float, integer, string, valuelist, notes, urlink, password, customer, tool, transitem, transmovement, transpayment, product, project, employee, place*
type Deffield struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Fieldname string `protobuf:"bytes,2,opt,name=fieldname,proto3" json:"fieldname,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'nervatype')
	Nervatype int64 `protobuf:"varint,3,opt,name=nervatype,proto3" json:"nervatype,omitempty"`
	//  Reference to [Groups](#groups).id (where groupname in ('custtype','placetype','  protype','toolgroup','transtype'))
	Subtype int64 `protobuf:"varint,4,opt,name=subtype,proto3" json:"subtype,omitempty"`
	// Reference to [Groups](#groups).id  (only where groupname = 'fieldtype')
	Fieldtype   int64  `protobuf:"varint,5,opt,name=fieldtype,proto3" json:"fieldtype,omitempty"`
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// If fieldtype=valuelist: valid values are listed, separated by ~
	Valuelist string `protobuf:"bytes,7,opt,name=valuelist,proto3" json:"valuelist,omitempty"`
	// When selected, the attribute in case of adding a new element (eg a new customer or employee is created) will automatically be created with the default value according to its type and also will be attached to the new element.
	Addnew bool `protobuf:"varint,8,opt,name=addnew,proto3" json:"addnew,omitempty"`
	// Can appear or not (hidden value) on the entry forms
	Visible bool `protobuf:"varint,9,opt,name=visible,proto3" json:"visible,omitempty"`
	// The value of the attribute can not be changed in the program interface
	Readonly bool `protobuf:"varint,10,opt,name=readonly,proto3" json:"readonly,omitempty"`
}

func (x *Deffield) Reset() {
	*x = Deffield{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deffield) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deffield) ProtoMessage() {}

func (x *Deffield) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deffield.ProtoReflect.Descriptor instead.
func (*Deffield) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{35}
}

func (x *Deffield) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Deffield) GetFieldname() string {
	if x != nil {
		return x.Fieldname
	}
	return ""
}

func (x *Deffield) GetNervatype() int64 {
	if x != nil {
		return x.Nervatype
	}
	return 0
}

func (x *Deffield) GetSubtype() int64 {
	if x != nil {
		return x.Subtype
	}
	return 0
}

func (x *Deffield) GetFieldtype() int64 {
	if x != nil {
		return x.Fieldtype
	}
	return 0
}

func (x *Deffield) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Deffield) GetValuelist() string {
	if x != nil {
		return x.Valuelist
	}
	return ""
}

func (x *Deffield) GetAddnew() bool {
	if x != nil {
		return x.Addnew
	}
	return false
}

func (x *Deffield) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *Deffield) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: Employee *empnumber*
//
//- ```usergroup```: All groupvalue from Groups, where groupname equal usergroup
//
//- ```department```: All groupvalue from Groups, where groupname equal department
type Employee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique ID. If you set it to numberdef, it will be generated at the first data save. The format and value of the next data in row is taken from the numberdef (numberkey = empnumber) data series.
	Empnumber string `protobuf:"bytes,2,opt,name=empnumber,proto3" json:"empnumber,omitempty"`
	// Database login name. Should be unique on database level.
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'usergroup')
	Usergroup int64  `protobuf:"varint,4,opt,name=usergroup,proto3" json:"usergroup,omitempty"`
	Startdate string `protobuf:"bytes,5,opt,name=startdate,proto3" json:"startdate,omitempty"`
	Enddate   string `protobuf:"bytes,6,opt,name=enddate,proto3" json:"enddate,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'department')
	Department      int64  `protobuf:"varint,7,opt,name=department,proto3" json:"department,omitempty"`
	RegistrationKey string `protobuf:"bytes,8,opt,name=registration_key,json=registrationKey,proto3" json:"registration_key,omitempty"`
	Inactive        bool   `protobuf:"varint,9,opt,name=inactive,proto3" json:"inactive,omitempty"`
	// Employee meta data
	Metadata []*MetaData `protobuf:"bytes,13,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Employee) Reset() {
	*x = Employee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Employee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Employee) ProtoMessage() {}

func (x *Employee) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Employee.ProtoReflect.Descriptor instead.
func (*Employee) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{36}
}

func (x *Employee) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Employee) GetEmpnumber() string {
	if x != nil {
		return x.Empnumber
	}
	return ""
}

func (x *Employee) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Employee) GetUsergroup() int64 {
	if x != nil {
		return x.Usergroup
	}
	return 0
}

func (x *Employee) GetStartdate() string {
	if x != nil {
		return x.Startdate
	}
	return ""
}

func (x *Employee) GetEnddate() string {
	if x != nil {
		return x.Enddate
	}
	return ""
}

func (x *Employee) GetDepartment() int64 {
	if x != nil {
		return x.Department
	}
	return 0
}

func (x *Employee) GetRegistrationKey() string {
	if x != nil {
		return x.RegistrationKey
	}
	return ""
}

func (x *Employee) GetInactive() bool {
	if x != nil {
		return x.Inactive
	}
	return false
}

func (x *Employee) GetMetadata() []*MetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: Event *calnumber*
//
//- ```nervatype```: Valid values: *customer, employee, place, product, project, tool, trans*
//
//- ```ref_id```: Valid values: *customer/{custnumber}, employee/{empnumber}, place/{planumber}, product/{partnumber}, project/{pronumber}, tool/{serial}, trans/{transnumber}*
//
//- ```eventgroup```: All groupvalue from Groups, where groupname equal eventgroup
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique ID. If you set it to numberdef, it will be generated at the first data save. The format and value of the next data in row is taken from the numberdef (numberkey = calnumber) data series.
	Calnumber string `protobuf:"bytes,2,opt,name=calnumber,proto3" json:"calnumber,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'nervatype')
	Nervatype int64 `protobuf:"varint,3,opt,name=nervatype,proto3" json:"nervatype,omitempty"`
	// Reference to [Customer](#customer).id, [Employee](#employee).id, [Place](#place).id, [Product](#product).id, [Project](#project).id, [Tool](#tool).id, [Trans](#trans).id
	RefId int64  `protobuf:"varint,4,opt,name=ref_id,json=refId,proto3" json:"ref_id,omitempty"`
	Uid   string `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'eventgroup')
	Eventgroup int64 `protobuf:"varint,6,opt,name=eventgroup,proto3" json:"eventgroup,omitempty"`
	// Datetime
	Fromdate string `protobuf:"bytes,7,opt,name=fromdate,proto3" json:"fromdate,omitempty"`
	// Datetime
	Todate      string `protobuf:"bytes,8,opt,name=todate,proto3" json:"todate,omitempty"`
	Subject     string `protobuf:"bytes,9,opt,name=subject,proto3" json:"subject,omitempty"`
	Place       string `protobuf:"bytes,10,opt,name=place,proto3" json:"place,omitempty"`
	Description string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	// Event meta data
	Metadata []*MetaData `protobuf:"bytes,12,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{37}
}

func (x *Event) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Event) GetCalnumber() string {
	if x != nil {
		return x.Calnumber
	}
	return ""
}

func (x *Event) GetNervatype() int64 {
	if x != nil {
		return x.Nervatype
	}
	return 0
}

func (x *Event) GetRefId() int64 {
	if x != nil {
		return x.RefId
	}
	return 0
}

func (x *Event) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Event) GetEventgroup() int64 {
	if x != nil {
		return x.Eventgroup
	}
	return 0
}

func (x *Event) GetFromdate() string {
	if x != nil {
		return x.Fromdate
	}
	return ""
}

func (x *Event) GetTodate() string {
	if x != nil {
		return x.Todate
	}
	return ""
}

func (x *Event) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Event) GetPlace() string {
	if x != nil {
		return x.Place
	}
	return ""
}

func (x *Event) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Event) GetMetadata() []*MetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: The value is a generated constant key identifier: *{refnumber}~~{fieldname}~{rownumber}*. The rownumber is the order of multiple *{refnumber}~~{fieldname}* keys.
//
//- ```ref_id```: Valid values: *{nervatype}/{refnumber}*
type Fieldvalue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Reference to [Deffield](#deffield).fieldname.
	Fieldname string `protobuf:"bytes,2,opt,name=fieldname,proto3" json:"fieldname,omitempty"`
	// Reference to any type.id where type = [Deffield](#deffield).nervatype. If it is null then nervatype = setting.
	RefId int64  `protobuf:"varint,3,opt,name=ref_id,json=refId,proto3" json:"ref_id,omitempty"`
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Notes string `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *Fieldvalue) Reset() {
	*x = Fieldvalue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fieldvalue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fieldvalue) ProtoMessage() {}

func (x *Fieldvalue) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fieldvalue.ProtoReflect.Descriptor instead.
func (*Fieldvalue) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{38}
}

func (x *Fieldvalue) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Fieldvalue) GetFieldname() string {
	if x != nil {
		return x.Fieldname
	}
	return ""
}

func (x *Fieldvalue) GetRefId() int64 {
	if x != nil {
		return x.RefId
	}
	return 0
}

func (x *Fieldvalue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Fieldvalue) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: Group *groupname~groupvalue*
type Groups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Groupname   string `protobuf:"bytes,2,opt,name=groupname,proto3" json:"groupname,omitempty"`
	Groupvalue  string `protobuf:"bytes,3,opt,name=groupvalue,proto3" json:"groupvalue,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Inactive    bool   `protobuf:"varint,5,opt,name=inactive,proto3" json:"inactive,omitempty"`
}

func (x *Groups) Reset() {
	*x = Groups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Groups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Groups) ProtoMessage() {}

func (x *Groups) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Groups.ProtoReflect.Descriptor instead.
func (*Groups) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{39}
}

func (x *Groups) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Groups) GetGroupname() string {
	if x != nil {
		return x.Groupname
	}
	return ""
}

func (x *Groups) GetGroupvalue() string {
	if x != nil {
		return x.Groupvalue
	}
	return ""
}

func (x *Groups) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Groups) GetInactive() bool {
	if x != nil {
		return x.Inactive
	}
	return false
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: Trans and Item *transnumber~rownumber*
//
//- ```trans_id```: Trans *transnumber*
//
//- ```product_id```: Product *partnumber*
//
//- ```tax_id```: Tax *taxcode*
type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Reference to [trans](#trans).id
	TransId int64 `protobuf:"varint,2,opt,name=trans_id,json=transId,proto3" json:"trans_id,omitempty"`
	// Reference to [product](#product).id
	ProductId int64   `protobuf:"varint,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Unit      string  `protobuf:"bytes,4,opt,name=unit,proto3" json:"unit,omitempty"`
	Qty       float64 `protobuf:"fixed64,5,opt,name=qty,proto3" json:"qty,omitempty"`
	Fxprice   float64 `protobuf:"fixed64,6,opt,name=fxprice,proto3" json:"fxprice,omitempty"`
	Netamount float64 `protobuf:"fixed64,7,opt,name=netamount,proto3" json:"netamount,omitempty"`
	Discount  float64 `protobuf:"fixed64,8,opt,name=discount,proto3" json:"discount,omitempty"`
	// Reference to [Tax](#tax).id
	TaxId       int64   `protobuf:"varint,9,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
	Vatamount   float64 `protobuf:"fixed64,10,opt,name=vatamount,proto3" json:"vatamount,omitempty"`
	Amount      float64 `protobuf:"fixed64,11,opt,name=amount,proto3" json:"amount,omitempty"`
	Description string  `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	Deposit     bool    `protobuf:"varint,13,opt,name=deposit,proto3" json:"deposit,omitempty"`
	Ownstock    float64 `protobuf:"fixed64,14,opt,name=ownstock,proto3" json:"ownstock,omitempty"`
	Actionprice bool    `protobuf:"varint,15,opt,name=actionprice,proto3" json:"actionprice,omitempty"`
	// Item meta data
	Metadata []*MetaData `protobuf:"bytes,16,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{40}
}

func (x *Item) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Item) GetTransId() int64 {
	if x != nil {
		return x.TransId
	}
	return 0
}

func (x *Item) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *Item) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Item) GetQty() float64 {
	if x != nil {
		return x.Qty
	}
	return 0
}

func (x *Item) GetFxprice() float64 {
	if x != nil {
		return x.Fxprice
	}
	return 0
}

func (x *Item) GetNetamount() float64 {
	if x != nil {
		return x.Netamount
	}
	return 0
}

func (x *Item) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *Item) GetTaxId() int64 {
	if x != nil {
		return x.TaxId
	}
	return 0
}

func (x *Item) GetVatamount() float64 {
	if x != nil {
		return x.Vatamount
	}
	return 0
}

func (x *Item) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Item) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Item) GetDeposit() bool {
	if x != nil {
		return x.Deposit
	}
	return false
}

func (x *Item) GetOwnstock() float64 {
	if x != nil {
		return x.Ownstock
	}
	return 0
}

func (x *Item) GetActionprice() bool {
	if x != nil {
		return x.Actionprice
	}
	return false
}

func (x *Item) GetMetadata() []*MetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: *{nervatype_1}~{refnumber_1}~~{nervatype_2}~{refnumber_2}*
//
//- ```nervatype_1```: All groupvalue from Groups, where groupname equal nervatype
//
//- ```ref_id_1```: *{nervatype_1}/{refnumber_1}*
//
//- ```nervatype_2```: All groupvalue from Groups, where groupname equal nervatype
type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'nervatype')
	Nervatype_1 int64 `protobuf:"varint,2,opt,name=nervatype_1,json=nervatype1,proto3" json:"nervatype_1,omitempty"`
	// Reference to {nervatype}.id
	RefId_1 int64 `protobuf:"varint,3,opt,name=ref_id_1,json=refId1,proto3" json:"ref_id_1,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'nervatype')
	Nervatype_2 int64 `protobuf:"varint,4,opt,name=nervatype_2,json=nervatype2,proto3" json:"nervatype_2,omitempty"`
	// Reference to {nervatype}.id
	RefId_2 int64 `protobuf:"varint,5,opt,name=ref_id_2,json=refId2,proto3" json:"ref_id_2,omitempty"`
	// Link meta data
	Metadata []*MetaData `protobuf:"bytes,16,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Link) Reset() {
	*x = Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{41}
}

func (x *Link) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Link) GetNervatype_1() int64 {
	if x != nil {
		return x.Nervatype_1
	}
	return 0
}

func (x *Link) GetRefId_1() int64 {
	if x != nil {
		return x.RefId_1
	}
	return 0
}

func (x *Link) GetNervatype_2() int64 {
	if x != nil {
		return x.Nervatype_2
	}
	return 0
}

func (x *Link) GetRefId_2() int64 {
	if x != nil {
		return x.RefId_2
	}
	return 0
}

func (x *Link) GetMetadata() []*MetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: *{empnumber}~{crdate}'*
//
//- ```employee_id```: Employee *empnumber*
//
//- ```ref_id```: *{nervatype}/{refnumber}*
//
//- ```nervatype```: All groupvalue from Groups, where groupname equal nervatype
//
//- ```logstate```: Valid values: update, closed, deleted, print, login, logout
type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Reference to [Employee](#employee).id
	EmployeeId int64 `protobuf:"varint,2,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	// Date-time
	Crdate string `protobuf:"bytes,3,opt,name=crdate,proto3" json:"crdate,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'nervatype')
	Nervatype int64 `protobuf:"varint,4,opt,name=nervatype,proto3" json:"nervatype,omitempty"`
	// Reference to {nervatype}.id
	RefId int64 `protobuf:"varint,5,opt,name=ref_id,json=refId,proto3" json:"ref_id,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'logstate')
	Logstate int64 `protobuf:"varint,6,opt,name=logstate,proto3" json:"logstate,omitempty"`
	// Log meta data
	Metadata []*MetaData `protobuf:"bytes,16,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{42}
}

func (x *Log) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Log) GetEmployeeId() int64 {
	if x != nil {
		return x.EmployeeId
	}
	return 0
}

func (x *Log) GetCrdate() string {
	if x != nil {
		return x.Crdate
	}
	return ""
}

func (x *Log) GetNervatype() int64 {
	if x != nil {
		return x.Nervatype
	}
	return 0
}

func (x *Log) GetRefId() int64 {
	if x != nil {
		return x.RefId
	}
	return 0
}

func (x *Log) GetLogstate() int64 {
	if x != nil {
		return x.Logstate
	}
	return 0
}

func (x *Log) GetMetadata() []*MetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: Trans and Item *transnumber~rownumber*
//
//- ```trans_id```: Trans *transnumber*
//
//- ```product_id```: Product *partnumber*
//
//- ```movetype```: Valid values: *inventory, tool, plan, head*
//
//- ```tool_id```: Tool *serial*
//
//- ```place_id```: Place *planumber*
type Movement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Reference to [Trans](#trans).id
	TransId int64 `protobuf:"varint,2,opt,name=trans_id,json=transId,proto3" json:"trans_id,omitempty"`
	// Date-time
	Shippingdate string `protobuf:"bytes,3,opt,name=shippingdate,proto3" json:"shippingdate,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'movetype')
	Movetype int64 `protobuf:"varint,4,opt,name=movetype,proto3" json:"movetype,omitempty"`
	// Reference to [Product](#product).id
	ProductId int64 `protobuf:"varint,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// Reference to [Tool](#tool).id
	ToolId int64 `protobuf:"varint,6,opt,name=tool_id,json=toolId,proto3" json:"tool_id,omitempty"`
	// Reference to [Place](#place).id
	PlaceId     int64   `protobuf:"varint,7,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"`
	Qty         float64 `protobuf:"fixed64,8,opt,name=qty,proto3" json:"qty,omitempty"`
	Description string  `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	Shared      bool    `protobuf:"varint,10,opt,name=shared,proto3" json:"shared,omitempty"`
	// Movement meta data
	Metadata []*MetaData `protobuf:"bytes,16,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Movement) Reset() {
	*x = Movement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Movement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Movement) ProtoMessage() {}

func (x *Movement) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Movement.ProtoReflect.Descriptor instead.
func (*Movement) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{43}
}

func (x *Movement) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Movement) GetTransId() int64 {
	if x != nil {
		return x.TransId
	}
	return 0
}

func (x *Movement) GetShippingdate() string {
	if x != nil {
		return x.Shippingdate
	}
	return ""
}

func (x *Movement) GetMovetype() int64 {
	if x != nil {
		return x.Movetype
	}
	return 0
}

func (x *Movement) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *Movement) GetToolId() int64 {
	if x != nil {
		return x.ToolId
	}
	return 0
}

func (x *Movement) GetPlaceId() int64 {
	if x != nil {
		return x.PlaceId
	}
	return 0
}

func (x *Movement) GetQty() float64 {
	if x != nil {
		return x.Qty
	}
	return 0
}

func (x *Movement) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Movement) GetShared() bool {
	if x != nil {
		return x.Shared
	}
	return false
}

func (x *Movement) GetMetadata() []*MetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: Numberdef *numberkey*
type Numberdef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique key
	Numberkey string `protobuf:"bytes,2,opt,name=numberkey,proto3" json:"numberkey,omitempty"`
	// The text prefix of the identifier. It can be any length, but usage of special characters, spaces in the text is not recommended.
	Prefix string `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// The current status of the counter, the next sequence number will be one value higher than this one. It is possible to re-set the counter, but the uniqueness must be ensured in all cases!
	Curvalue int64 `protobuf:"varint,4,opt,name=curvalue,proto3" json:"curvalue,omitempty"`
	// If selected, the created identifier will contain the year.
	Isyear bool `protobuf:"varint,5,opt,name=isyear,proto3" json:"isyear,omitempty"`
	// The separator character in the identifier. Default: "/"
	Sep string `protobuf:"bytes,6,opt,name=sep,proto3" json:"sep,omitempty"`
	// The value field is arranged in such length to the right and filled with zeros.
	Len         int64  `protobuf:"varint,7,opt,name=len,proto3" json:"len,omitempty"`
	Description string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Visible     bool   `protobuf:"varint,9,opt,name=visible,proto3" json:"visible,omitempty"`
	Readonly    bool   `protobuf:"varint,10,opt,name=readonly,proto3" json:"readonly,omitempty"`
	Orderby     int64  `protobuf:"varint,11,opt,name=orderby,proto3" json:"orderby,omitempty"`
}

func (x *Numberdef) Reset() {
	*x = Numberdef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Numberdef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Numberdef) ProtoMessage() {}

func (x *Numberdef) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Numberdef.ProtoReflect.Descriptor instead.
func (*Numberdef) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{44}
}

func (x *Numberdef) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Numberdef) GetNumberkey() string {
	if x != nil {
		return x.Numberkey
	}
	return ""
}

func (x *Numberdef) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Numberdef) GetCurvalue() int64 {
	if x != nil {
		return x.Curvalue
	}
	return 0
}

func (x *Numberdef) GetIsyear() bool {
	if x != nil {
		return x.Isyear
	}
	return false
}

func (x *Numberdef) GetSep() string {
	if x != nil {
		return x.Sep
	}
	return ""
}

func (x *Numberdef) GetLen() int64 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *Numberdef) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Numberdef) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *Numberdef) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

func (x *Numberdef) GetOrderby() int64 {
	if x != nil {
		return x.Orderby
	}
	return 0
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: Pattern *description*
type Pattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'transtype')
	Transtype  int64  `protobuf:"varint,3,opt,name=transtype,proto3" json:"transtype,omitempty"`
	Notes      string `protobuf:"bytes,4,opt,name=notes,proto3" json:"notes,omitempty"`
	Defpattern bool   `protobuf:"varint,5,opt,name=defpattern,proto3" json:"defpattern,omitempty"`
}

func (x *Pattern) Reset() {
	*x = Pattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pattern) ProtoMessage() {}

func (x *Pattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pattern.ProtoReflect.Descriptor instead.
func (*Pattern) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{45}
}

func (x *Pattern) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Pattern) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Pattern) GetTranstype() int64 {
	if x != nil {
		return x.Transtype
	}
	return 0
}

func (x *Pattern) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Pattern) GetDefpattern() bool {
	if x != nil {
		return x.Defpattern
	}
	return false
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: Trans and Item *transnumber~rownumber*
//
//- ```trans_id```: Trans *transnumber*
type Payment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Reference to [Trans](#trans).id
	TransId  int64   `protobuf:"varint,2,opt,name=trans_id,json=transId,proto3" json:"trans_id,omitempty"`
	Paiddate string  `protobuf:"bytes,3,opt,name=paiddate,proto3" json:"paiddate,omitempty"`
	Amount   float64 `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Notes    string  `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
	// Payment meta data
	Metadata []*MetaData `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Payment) Reset() {
	*x = Payment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payment) ProtoMessage() {}

func (x *Payment) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payment.ProtoReflect.Descriptor instead.
func (*Payment) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{46}
}

func (x *Payment) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Payment) GetTransId() int64 {
	if x != nil {
		return x.TransId
	}
	return 0
}

func (x *Payment) GetPaiddate() string {
	if x != nil {
		return x.Paiddate
	}
	return ""
}

func (x *Payment) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Payment) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Payment) GetMetadata() []*MetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: Place *planumber*
//
//- ```placetype```: Valid values: *bank, cash, warehouse, other*
type Place struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique ID. If you set it to numberdef, it will be generated at the first data save. The format and value of the next data in row is taken from the numberdef (numberkey = planumber) data series.
	Planumber string `protobuf:"bytes,2,opt,name=planumber,proto3" json:"planumber,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'placetype')
	Placetype   int64  `protobuf:"varint,3,opt,name=placetype,proto3" json:"placetype,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Curr        string `protobuf:"bytes,5,opt,name=curr,proto3" json:"curr,omitempty"`
	Defplace    bool   `protobuf:"varint,6,opt,name=defplace,proto3" json:"defplace,omitempty"`
	Notes       string `protobuf:"bytes,7,opt,name=notes,proto3" json:"notes,omitempty"`
	Inactive    bool   `protobuf:"varint,8,opt,name=inactive,proto3" json:"inactive,omitempty"`
	// Place meta data
	Metadata []*MetaData `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Place) Reset() {
	*x = Place{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Place) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Place) ProtoMessage() {}

func (x *Place) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Place.ProtoReflect.Descriptor instead.
func (*Place) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{47}
}

func (x *Place) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Place) GetPlanumber() string {
	if x != nil {
		return x.Planumber
	}
	return ""
}

func (x *Place) GetPlacetype() int64 {
	if x != nil {
		return x.Placetype
	}
	return 0
}

func (x *Place) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Place) GetCurr() string {
	if x != nil {
		return x.Curr
	}
	return ""
}

func (x *Place) GetDefplace() bool {
	if x != nil {
		return x.Defplace
	}
	return false
}

func (x *Place) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Place) GetInactive() bool {
	if x != nil {
		return x.Inactive
	}
	return false
}

func (x *Place) GetMetadata() []*MetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: Price *partnumber~validfrom~curr~qty*
//
//- ```product_id```: Product *partnumber*
type Price struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Reference to [Product](#product).id
	ProductId int64 `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// Start of validity, mandatory data.
	Validfrom string `protobuf:"bytes,3,opt,name=validfrom,proto3" json:"validfrom,omitempty"`
	// End of validity, can be left empty.
	Validto string `protobuf:"bytes,4,opt,name=validto,proto3" json:"validto,omitempty"`
	Curr    string `protobuf:"bytes,5,opt,name=curr,proto3" json:"curr,omitempty"`
	// Price ranges can also be specified, thus different price can be set for a smaller and bigger quantity of the same product. The quantity should be used as the lower threshold, ie. this should be the minimum quantity for the price set.
	Qty float64 `protobuf:"fixed64,6,opt,name=qty,proto3" json:"qty,omitempty"`
	// Price value
	Pricevalue float64 `protobuf:"fixed64,7,opt,name=pricevalue,proto3" json:"pricevalue,omitempty"`
	// Supplier (if marked) or customer price. By default the customer price.
	Vendorprice bool `protobuf:"varint,8,opt,name=vendorprice,proto3" json:"vendorprice,omitempty"`
	// Price meta data
	Metadata []*MetaData `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Price) Reset() {
	*x = Price{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Price) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Price) ProtoMessage() {}

func (x *Price) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Price.ProtoReflect.Descriptor instead.
func (*Price) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{48}
}

func (x *Price) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Price) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *Price) GetValidfrom() string {
	if x != nil {
		return x.Validfrom
	}
	return ""
}

func (x *Price) GetValidto() string {
	if x != nil {
		return x.Validto
	}
	return ""
}

func (x *Price) GetCurr() string {
	if x != nil {
		return x.Curr
	}
	return ""
}

func (x *Price) GetQty() float64 {
	if x != nil {
		return x.Qty
	}
	return 0
}

func (x *Price) GetPricevalue() float64 {
	if x != nil {
		return x.Pricevalue
	}
	return 0
}

func (x *Price) GetVendorprice() bool {
	if x != nil {
		return x.Vendorprice
	}
	return false
}

func (x *Price) GetMetadata() []*MetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: Product *partnumber*
//
//- ```protype```: Valid values: *item, service*
//
//- ```tax_id```: Tax *taxcode*
type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique ID. If you set it to numberdef, it will be generated at the first data save. The format and value of the next data in row is taken from the numberdef (numberkey = partnumber) data series.
	Partnumber string `protobuf:"bytes,2,opt,name=partnumber,proto3" json:"partnumber,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'protype')
	Protype int64 `protobuf:"varint,3,opt,name=protype,proto3" json:"protype,omitempty"`
	// The full name of the product or short description.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Unit        string `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// Reference to [Tax](#tax).id
	TaxId    int64  `protobuf:"varint,6,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
	Notes    string `protobuf:"bytes,7,opt,name=notes,proto3" json:"notes,omitempty"`
	Webitem  bool   `protobuf:"varint,8,opt,name=webitem,proto3" json:"webitem,omitempty"`
	Inactive bool   `protobuf:"varint,9,opt,name=inactive,proto3" json:"inactive,omitempty"`
	// Product meta data
	Metadata []*MetaData `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{49}
}

func (x *Product) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Product) GetPartnumber() string {
	if x != nil {
		return x.Partnumber
	}
	return ""
}

func (x *Product) GetProtype() int64 {
	if x != nil {
		return x.Protype
	}
	return 0
}

func (x *Product) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Product) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Product) GetTaxId() int64 {
	if x != nil {
		return x.TaxId
	}
	return 0
}

func (x *Product) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Product) GetWebitem() bool {
	if x != nil {
		return x.Webitem
	}
	return false
}

func (x *Product) GetInactive() bool {
	if x != nil {
		return x.Inactive
	}
	return false
}

func (x *Product) GetMetadata() []*MetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: Project *pronumber*
//
//- ```customer_id```: Tax *custnumber*
type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique ID. If you set it to numberdef, it will be generated at the first data save. The format and value of the next data in row is taken from the numberdef (numberkey = pronumber) data series.
	Pronumber string `protobuf:"bytes,2,opt,name=pronumber,proto3" json:"pronumber,omitempty"`
	// The name of the project.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Reference to [Customer](#customer).id
	CustomerId int64  `protobuf:"varint,4,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Startdate  string `protobuf:"bytes,5,opt,name=startdate,proto3" json:"startdate,omitempty"`
	Enddate    string `protobuf:"bytes,6,opt,name=enddate,proto3" json:"enddate,omitempty"`
	Notes      string `protobuf:"bytes,7,opt,name=notes,proto3" json:"notes,omitempty"`
	Inactive   bool   `protobuf:"varint,8,opt,name=inactive,proto3" json:"inactive,omitempty"`
	// Project meta data
	Metadata []*MetaData `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{50}
}

func (x *Project) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Project) GetPronumber() string {
	if x != nil {
		return x.Pronumber
	}
	return ""
}

func (x *Project) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Project) GetCustomerId() int64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *Project) GetStartdate() string {
	if x != nil {
		return x.Startdate
	}
	return ""
}

func (x *Project) GetEnddate() string {
	if x != nil {
		return x.Enddate
	}
	return ""
}

func (x *Project) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Project) GetInactive() bool {
	if x != nil {
		return x.Inactive
	}
	return false
}

func (x *Project) GetMetadata() []*MetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: Rate *ratetype~ratedate~curr~planumber*
//
//- ```place_id```: Place *planumber*
//
//- ```ratetype```: Valid values: *rate, buy, sell,average*
//
//- ```rategroup```: all groupvalue from Groups, where groupname equal rategroup
type Rate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'ratetype')
	Ratetype int64  `protobuf:"varint,2,opt,name=ratetype,proto3" json:"ratetype,omitempty"`
	Ratedate string `protobuf:"bytes,3,opt,name=ratedate,proto3" json:"ratedate,omitempty"`
	Curr     string `protobuf:"bytes,4,opt,name=curr,proto3" json:"curr,omitempty"`
	// Reference to [Place](#place).id
	PlaceId int64 `protobuf:"varint,5,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'rategroup')
	Rategroup int64 `protobuf:"varint,6,opt,name=rategroup,proto3" json:"rategroup,omitempty"`
	// Rate or interest value
	Ratevalue float64 `protobuf:"fixed64,7,opt,name=ratevalue,proto3" json:"ratevalue,omitempty"`
	// Rate meta data
	Metadata []*MetaData `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Rate) Reset() {
	*x = Rate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rate) ProtoMessage() {}

func (x *Rate) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rate.ProtoReflect.Descriptor instead.
func (*Rate) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{51}
}

func (x *Rate) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Rate) GetRatetype() int64 {
	if x != nil {
		return x.Ratetype
	}
	return 0
}

func (x *Rate) GetRatedate() string {
	if x != nil {
		return x.Ratedate
	}
	return ""
}

func (x *Rate) GetCurr() string {
	if x != nil {
		return x.Curr
	}
	return ""
}

func (x *Rate) GetPlaceId() int64 {
	if x != nil {
		return x.PlaceId
	}
	return 0
}

func (x *Rate) GetRategroup() int64 {
	if x != nil {
		return x.Rategroup
	}
	return 0
}

func (x *Rate) GetRatevalue() float64 {
	if x != nil {
		return x.Ratevalue
	}
	return 0
}

func (x *Rate) GetMetadata() []*MetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: Tax *taxcode*
type Tax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique ID.
	Taxcode     string `protobuf:"bytes,2,opt,name=taxcode,proto3" json:"taxcode,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Rate or interest value
	Rate     float64 `protobuf:"fixed64,4,opt,name=rate,proto3" json:"rate,omitempty"`
	Inactive bool    `protobuf:"varint,5,opt,name=inactive,proto3" json:"inactive,omitempty"`
	// Tax meta data
	Metadata []*MetaData `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Tax) Reset() {
	*x = Tax{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tax) ProtoMessage() {}

func (x *Tax) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tax.ProtoReflect.Descriptor instead.
func (*Tax) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{52}
}

func (x *Tax) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tax) GetTaxcode() string {
	if x != nil {
		return x.Taxcode
	}
	return ""
}

func (x *Tax) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Tax) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *Tax) GetInactive() bool {
	if x != nil {
		return x.Inactive
	}
	return false
}

func (x *Tax) GetMetadata() []*MetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: Tool *serial*
//
//- ```toolgroup```: all groupvalue from Groups, where groupname equal toolgroup
//
//- ```product_id```: Product *partnumber*
type Tool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique ID. If you set it to numberdef, it will be generated at the first data save. The format and value of the next data in row is taken from the numberdef (numberkey = serial) data series.
	Serial      string `protobuf:"bytes,2,opt,name=serial,proto3" json:"serial,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Reference to [Product](#product).id
	ProductId int64 `protobuf:"varint,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'toolgroup')
	Toolgroup int64  `protobuf:"varint,5,opt,name=toolgroup,proto3" json:"toolgroup,omitempty"`
	Notes     string `protobuf:"bytes,6,opt,name=notes,proto3" json:"notes,omitempty"`
	Inactive  bool   `protobuf:"varint,7,opt,name=inactive,proto3" json:"inactive,omitempty"`
	// Tool meta data
	Metadata []*MetaData `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Tool) Reset() {
	*x = Tool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tool) ProtoMessage() {}

func (x *Tool) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tool.ProtoReflect.Descriptor instead.
func (*Tool) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{53}
}

func (x *Tool) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tool) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *Tool) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Tool) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *Tool) GetToolgroup() int64 {
	if x != nil {
		return x.Toolgroup
	}
	return 0
}

func (x *Tool) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Tool) GetInactive() bool {
	if x != nil {
		return x.Inactive
	}
	return false
}

func (x *Tool) GetMetadata() []*MetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: Trans *transnumber*
//
//- ```transtype```: all groupvalue from Groups, where groupname equal transtype
//
//- ```direction```: Valid values *in, out, transfer*
//
//- ```customer_id```: Customer *custnumber*
//
//- ```employee_id```: Employee *empnumber*
//
//- ```department```: all groupvalue from Groups, where groupname equal department
//
//- ```project_id```: Project *pronumber*
//
//- ```place_id```: Place *planumber*
//
//- ```paidtype```: all groupvalue from Groups, where groupname equal paidtype
//
//- ```transtate```: all groupvalue from Groups, where groupname equal transtate
type Trans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique ID. If you set it to numberdef, it will be generated at the first data save. The format and value of the next data in row is taken from the numberdef (numberkey = transnumber) data series.
	Transnumber string `protobuf:"bytes,2,opt,name=transnumber,proto3" json:"transnumber,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'transtype')[Groups](#groups).id
	Transtype int64 `protobuf:"varint,3,opt,name=transtype,proto3" json:"transtype,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'direction')
	Direction      int64  `protobuf:"varint,4,opt,name=direction,proto3" json:"direction,omitempty"`
	RefTransnumber string `protobuf:"bytes,5,opt,name=ref_transnumber,json=refTransnumber,proto3" json:"ref_transnumber,omitempty"`
	Crdate         string `protobuf:"bytes,6,opt,name=crdate,proto3" json:"crdate,omitempty"`
	Transdate      string `protobuf:"bytes,7,opt,name=transdate,proto3" json:"transdate,omitempty"`
	// Date-time
	Duedate string `protobuf:"bytes,8,opt,name=duedate,proto3" json:"duedate,omitempty"`
	// Reference to [Customer](#customer).id
	CustomerId int64 `protobuf:"varint,9,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Reference to [Employee](#employee).id
	EmployeeId int64 `protobuf:"varint,10,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'department')
	Department int64 `protobuf:"varint,11,opt,name=department,proto3" json:"department,omitempty"`
	// Reference to [Project](#project).id
	ProjectId int64 `protobuf:"varint,12,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Reference to [Place](#place).id
	PlaceId int64 `protobuf:"varint,13,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'paidtype')
	Paidtype int64   `protobuf:"varint,14,opt,name=paidtype,proto3" json:"paidtype,omitempty"`
	Curr     string  `protobuf:"bytes,15,opt,name=curr,proto3" json:"curr,omitempty"`
	Notax    bool    `protobuf:"varint,16,opt,name=notax,proto3" json:"notax,omitempty"`
	Paid     bool    `protobuf:"varint,17,opt,name=paid,proto3" json:"paid,omitempty"`
	Acrate   float64 `protobuf:"fixed64,18,opt,name=acrate,proto3" json:"acrate,omitempty"`
	Notes    string  `protobuf:"bytes,19,opt,name=notes,proto3" json:"notes,omitempty"`
	Intnotes string  `protobuf:"bytes,20,opt,name=intnotes,proto3" json:"intnotes,omitempty"`
	Fnote    string  `protobuf:"bytes,21,opt,name=fnote,proto3" json:"fnote,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'transtate')
	Transtate int64 `protobuf:"varint,22,opt,name=transtate,proto3" json:"transtate,omitempty"`
	Closed    bool  `protobuf:"varint,23,opt,name=closed,proto3" json:"closed,omitempty"`
	// Trans meta data
	Metadata []*MetaData `protobuf:"bytes,24,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Trans) Reset() {
	*x = Trans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trans) ProtoMessage() {}

func (x *Trans) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trans.ProtoReflect.Descriptor instead.
func (*Trans) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{54}
}

func (x *Trans) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Trans) GetTransnumber() string {
	if x != nil {
		return x.Transnumber
	}
	return ""
}

func (x *Trans) GetTranstype() int64 {
	if x != nil {
		return x.Transtype
	}
	return 0
}

func (x *Trans) GetDirection() int64 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *Trans) GetRefTransnumber() string {
	if x != nil {
		return x.RefTransnumber
	}
	return ""
}

func (x *Trans) GetCrdate() string {
	if x != nil {
		return x.Crdate
	}
	return ""
}

func (x *Trans) GetTransdate() string {
	if x != nil {
		return x.Transdate
	}
	return ""
}

func (x *Trans) GetDuedate() string {
	if x != nil {
		return x.Duedate
	}
	return ""
}

func (x *Trans) GetCustomerId() int64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *Trans) GetEmployeeId() int64 {
	if x != nil {
		return x.EmployeeId
	}
	return 0
}

func (x *Trans) GetDepartment() int64 {
	if x != nil {
		return x.Department
	}
	return 0
}

func (x *Trans) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *Trans) GetPlaceId() int64 {
	if x != nil {
		return x.PlaceId
	}
	return 0
}

func (x *Trans) GetPaidtype() int64 {
	if x != nil {
		return x.Paidtype
	}
	return 0
}

func (x *Trans) GetCurr() string {
	if x != nil {
		return x.Curr
	}
	return ""
}

func (x *Trans) GetNotax() bool {
	if x != nil {
		return x.Notax
	}
	return false
}

func (x *Trans) GetPaid() bool {
	if x != nil {
		return x.Paid
	}
	return false
}

func (x *Trans) GetAcrate() float64 {
	if x != nil {
		return x.Acrate
	}
	return 0
}

func (x *Trans) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Trans) GetIntnotes() string {
	if x != nil {
		return x.Intnotes
	}
	return ""
}

func (x *Trans) GetFnote() string {
	if x != nil {
		return x.Fnote
	}
	return ""
}

func (x *Trans) GetTranstate() int64 {
	if x != nil {
		return x.Transtate
	}
	return 0
}

func (x *Trans) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *Trans) GetMetadata() []*MetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: UiAudit *{usergroup}~{nervatype}~{transtype}*
//
//- ```usergroup```: all groupvalue from Groups, where groupname equal usergroup
//
//- ```nervatype```: all groupvalue from Groups, where groupname equal nervatype
//
//- ```subtype```: all groupvalue from Groups, where groupname equal transtype, movetype, protype, custtype, placetype
//
//- ```inputfilter```: Valid values *disabled, readonly, update, all*
type UiAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'usergroup')
	Usergroup int64 `protobuf:"varint,2,opt,name=usergroup,proto3" json:"usergroup,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'nervatype')
	Nervatype int64 `protobuf:"varint,3,opt,name=nervatype,proto3" json:"nervatype,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'movetype')
	Subtype int64 `protobuf:"varint,4,opt,name=subtype,proto3" json:"subtype,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'inputfilter')
	Inputfilter int64 `protobuf:"varint,5,opt,name=inputfilter,proto3" json:"inputfilter,omitempty"`
	Supervisor  bool  `protobuf:"varint,6,opt,name=supervisor,proto3" json:"supervisor,omitempty"`
}

func (x *UiAudit) Reset() {
	*x = UiAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UiAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UiAudit) ProtoMessage() {}

func (x *UiAudit) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UiAudit.ProtoReflect.Descriptor instead.
func (*UiAudit) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{55}
}

func (x *UiAudit) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UiAudit) GetUsergroup() int64 {
	if x != nil {
		return x.Usergroup
	}
	return 0
}

func (x *UiAudit) GetNervatype() int64 {
	if x != nil {
		return x.Nervatype
	}
	return 0
}

func (x *UiAudit) GetSubtype() int64 {
	if x != nil {
		return x.Subtype
	}
	return 0
}

func (x *UiAudit) GetInputfilter() int64 {
	if x != nil {
		return x.Inputfilter
	}
	return 0
}

func (x *UiAudit) GetSupervisor() bool {
	if x != nil {
		return x.Supervisor
	}
	return false
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: UiLanguage *lang*
type UiLanguage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Lang        string `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UiLanguage) Reset() {
	*x = UiLanguage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UiLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UiLanguage) ProtoMessage() {}

func (x *UiLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UiLanguage.ProtoReflect.Descriptor instead.
func (*UiLanguage) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{56}
}

func (x *UiLanguage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UiLanguage) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *UiLanguage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: UiMenu *menukey*
type UiMenu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Menukey     string `protobuf:"bytes,2,opt,name=menukey,proto3" json:"menukey,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Modul       string `protobuf:"bytes,4,opt,name=modul,proto3" json:"modul,omitempty"`
	Icon        string `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	Funcname    string `protobuf:"bytes,6,opt,name=funcname,proto3" json:"funcname,omitempty"`
	Url         bool   `protobuf:"varint,7,opt,name=url,proto3" json:"url,omitempty"`
	Address     string `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *UiMenu) Reset() {
	*x = UiMenu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UiMenu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UiMenu) ProtoMessage() {}

func (x *UiMenu) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UiMenu.ProtoReflect.Descriptor instead.
func (*UiMenu) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{57}
}

func (x *UiMenu) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UiMenu) GetMenukey() string {
	if x != nil {
		return x.Menukey
	}
	return ""
}

func (x *UiMenu) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UiMenu) GetModul() string {
	if x != nil {
		return x.Modul
	}
	return ""
}

func (x *UiMenu) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *UiMenu) GetFuncname() string {
	if x != nil {
		return x.Funcname
	}
	return ""
}

func (x *UiMenu) GetUrl() bool {
	if x != nil {
		return x.Url
	}
	return false
}

func (x *UiMenu) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: UiMenufields *{menukey}~{fieldname}*
//
//- ```menu_id```: UiMenu *menukey*
type UiMenufields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Reference to [UiMenu](#UiMenu).id
	MenuId      int64  `protobuf:"varint,2,opt,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"`
	Fieldname   string `protobuf:"bytes,3,opt,name=fieldname,proto3" json:"fieldname,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'fieldtype')
	Fieldtype int64 `protobuf:"varint,5,opt,name=fieldtype,proto3" json:"fieldtype,omitempty"`
	Orderby   int64 `protobuf:"varint,6,opt,name=orderby,proto3" json:"orderby,omitempty"`
}

func (x *UiMenufields) Reset() {
	*x = UiMenufields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UiMenufields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UiMenufields) ProtoMessage() {}

func (x *UiMenufields) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UiMenufields.ProtoReflect.Descriptor instead.
func (*UiMenufields) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{58}
}

func (x *UiMenufields) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UiMenufields) GetMenuId() int64 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

func (x *UiMenufields) GetFieldname() string {
	if x != nil {
		return x.Fieldname
	}
	return ""
}

func (x *UiMenufields) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UiMenufields) GetFieldtype() int64 {
	if x != nil {
		return x.Fieldtype
	}
	return 0
}

func (x *UiMenufields) GetOrderby() int64 {
	if x != nil {
		return x.Orderby
	}
	return 0
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: UiMessage *{secname}~{fieldname}~{lang}*
type UiMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Secname   string `protobuf:"bytes,2,opt,name=secname,proto3" json:"secname,omitempty"`
	Fieldname string `protobuf:"bytes,3,opt,name=fieldname,proto3" json:"fieldname,omitempty"`
	Lang      string `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"`
	Msg       string `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *UiMessage) Reset() {
	*x = UiMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UiMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UiMessage) ProtoMessage() {}

func (x *UiMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UiMessage.ProtoReflect.Descriptor instead.
func (*UiMessage) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{59}
}

func (x *UiMessage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UiMessage) GetSecname() string {
	if x != nil {
		return x.Secname
	}
	return ""
}

func (x *UiMessage) GetFieldname() string {
	if x != nil {
		return x.Fieldname
	}
	return ""
}

func (x *UiMessage) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *UiMessage) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type UiPrintqueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'nervatype')
	Nervatype int64 `protobuf:"varint,2,opt,name=nervatype,proto3" json:"nervatype,omitempty"`
	// Reference to {nervatype}.id
	RefId int64   `protobuf:"varint,3,opt,name=ref_id,json=refId,proto3" json:"ref_id,omitempty"`
	Qty   float64 `protobuf:"fixed64,4,opt,name=qty,proto3" json:"qty,omitempty"`
	// Reference to [Employee](#employee).id
	EmployeeId int64 `protobuf:"varint,5,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	// Reference to [UiReport](#UiReport).id
	ReportId int64 `protobuf:"varint,6,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	// Date-time
	Crdate string `protobuf:"bytes,7,opt,name=crdate,proto3" json:"crdate,omitempty"`
}

func (x *UiPrintqueue) Reset() {
	*x = UiPrintqueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UiPrintqueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UiPrintqueue) ProtoMessage() {}

func (x *UiPrintqueue) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UiPrintqueue.ProtoReflect.Descriptor instead.
func (*UiPrintqueue) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{60}
}

func (x *UiPrintqueue) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UiPrintqueue) GetNervatype() int64 {
	if x != nil {
		return x.Nervatype
	}
	return 0
}

func (x *UiPrintqueue) GetRefId() int64 {
	if x != nil {
		return x.RefId
	}
	return 0
}

func (x *UiPrintqueue) GetQty() float64 {
	if x != nil {
		return x.Qty
	}
	return 0
}

func (x *UiPrintqueue) GetEmployeeId() int64 {
	if x != nil {
		return x.EmployeeId
	}
	return 0
}

func (x *UiPrintqueue) GetReportId() int64 {
	if x != nil {
		return x.ReportId
	}
	return 0
}

func (x *UiPrintqueue) GetCrdate() string {
	if x != nil {
		return x.Crdate
	}
	return ""
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: UiReport *reportkey*
//
//- ```nervatype```: all groupvalue from Groups, where groupname equal nervatype
//
//- ```transtype```: all groupvalue from Groups, where groupname equal transtype
//
//- ```direction```: all groupvalue from Groups, where groupname equal direction
//
//- ```filetype```: all groupvalue from Groups, where groupname equal filetype
type UiReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Reportkey string `protobuf:"bytes,2,opt,name=reportkey,proto3" json:"reportkey,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'nervatype')
	Nervatype int64 `protobuf:"varint,3,opt,name=nervatype,proto3" json:"nervatype,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'transtype')
	Transtype int64 `protobuf:"varint,4,opt,name=transtype,proto3" json:"transtype,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'direction')
	Direction   int64  `protobuf:"varint,5,opt,name=direction,proto3" json:"direction,omitempty"`
	Repname     string `protobuf:"bytes,6,opt,name=repname,proto3" json:"repname,omitempty"`
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Label       string `protobuf:"bytes,8,opt,name=label,proto3" json:"label,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'filetype')
	Filetype int64  `protobuf:"varint,9,opt,name=filetype,proto3" json:"filetype,omitempty"`
	Report   string `protobuf:"bytes,10,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *UiReport) Reset() {
	*x = UiReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UiReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UiReport) ProtoMessage() {}

func (x *UiReport) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UiReport.ProtoReflect.Descriptor instead.
func (*UiReport) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{61}
}

func (x *UiReport) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UiReport) GetReportkey() string {
	if x != nil {
		return x.Reportkey
	}
	return ""
}

func (x *UiReport) GetNervatype() int64 {
	if x != nil {
		return x.Nervatype
	}
	return 0
}

func (x *UiReport) GetTranstype() int64 {
	if x != nil {
		return x.Transtype
	}
	return 0
}

func (x *UiReport) GetDirection() int64 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *UiReport) GetRepname() string {
	if x != nil {
		return x.Repname
	}
	return ""
}

func (x *UiReport) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UiReport) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *UiReport) GetFiletype() int64 {
	if x != nil {
		return x.Filetype
	}
	return 0
}

func (x *UiReport) GetReport() string {
	if x != nil {
		return x.Report
	}
	return ""
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: *{reportkey}~{fieldname}*
//
//- ```report_id```: *{reportkey}*
//
//- ```wheretype```: All groupvalue from Groups, where groupname equal wheretype
//
//- ```fieldtype```: Valid valaus: *bool, date, integer, float, string*
type UiReportfields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Reference to [UiReport](#UiReport).id
	ReportId  int64  `protobuf:"varint,2,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	Fieldname string `protobuf:"bytes,3,opt,name=fieldname,proto3" json:"fieldname,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'fieldtype')
	Fieldtype int64 `protobuf:"varint,4,opt,name=fieldtype,proto3" json:"fieldtype,omitempty"`
	// Reference to [Groups](#groups).id (only where groupname = 'wheretype')
	Wheretype   int64  `protobuf:"varint,5,opt,name=wheretype,proto3" json:"wheretype,omitempty"`
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Orderby     int64  `protobuf:"varint,7,opt,name=orderby,proto3" json:"orderby,omitempty"`
	Sqlstr      string `protobuf:"bytes,8,opt,name=sqlstr,proto3" json:"sqlstr,omitempty"`
	Parameter   bool   `protobuf:"varint,9,opt,name=parameter,proto3" json:"parameter,omitempty"`
	Dataset     string `protobuf:"bytes,10,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Defvalue    string `protobuf:"bytes,11,opt,name=defvalue,proto3" json:"defvalue,omitempty"`
	Valuelist   string `protobuf:"bytes,12,opt,name=valuelist,proto3" json:"valuelist,omitempty"`
}

func (x *UiReportfields) Reset() {
	*x = UiReportfields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UiReportfields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UiReportfields) ProtoMessage() {}

func (x *UiReportfields) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UiReportfields.ProtoReflect.Descriptor instead.
func (*UiReportfields) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{62}
}

func (x *UiReportfields) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UiReportfields) GetReportId() int64 {
	if x != nil {
		return x.ReportId
	}
	return 0
}

func (x *UiReportfields) GetFieldname() string {
	if x != nil {
		return x.Fieldname
	}
	return ""
}

func (x *UiReportfields) GetFieldtype() int64 {
	if x != nil {
		return x.Fieldtype
	}
	return 0
}

func (x *UiReportfields) GetWheretype() int64 {
	if x != nil {
		return x.Wheretype
	}
	return 0
}

func (x *UiReportfields) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UiReportfields) GetOrderby() int64 {
	if x != nil {
		return x.Orderby
	}
	return 0
}

func (x *UiReportfields) GetSqlstr() string {
	if x != nil {
		return x.Sqlstr
	}
	return ""
}

func (x *UiReportfields) GetParameter() bool {
	if x != nil {
		return x.Parameter
	}
	return false
}

func (x *UiReportfields) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *UiReportfields) GetDefvalue() string {
	if x != nil {
		return x.Defvalue
	}
	return ""
}

func (x *UiReportfields) GetValuelist() string {
	if x != nil {
		return x.Valuelist
	}
	return ""
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: *{reportkey}~{dataset}*
//
//- ```report_id```: *{reportkey}*
type UiReportsources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Reference to [UiReport](#UiReport).id
	ReportId int64  `protobuf:"varint,2,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	Dataset  string `protobuf:"bytes,3,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Sqlstr   string `protobuf:"bytes,4,opt,name=sqlstr,proto3" json:"sqlstr,omitempty"`
}

func (x *UiReportsources) Reset() {
	*x = UiReportsources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UiReportsources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UiReportsources) ProtoMessage() {}

func (x *UiReportsources) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UiReportsources.ProtoReflect.Descriptor instead.
func (*UiReportsources) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{63}
}

func (x *UiReportsources) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UiReportsources) GetReportId() int64 {
	if x != nil {
		return x.ReportId
	}
	return 0
}

func (x *UiReportsources) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *UiReportsources) GetSqlstr() string {
	if x != nil {
		return x.Sqlstr
	}
	return ""
}

//
//RequestUpdate Key->ID keys:
//
//- ```id```: *{empnumber}~{section}~{cfgroup}~{cfname}*
//
//- ```employee_id```: Employee *{empnumber}*
type UiUserconfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Reference to [Employee](#employee).id
	EmployeeId int64  `protobuf:"varint,2,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	Section    string `protobuf:"bytes,3,opt,name=section,proto3" json:"section,omitempty"`
	Cfgroup    string `protobuf:"bytes,4,opt,name=cfgroup,proto3" json:"cfgroup,omitempty"`
	Cfname     string `protobuf:"bytes,5,opt,name=cfname,proto3" json:"cfname,omitempty"`
	Cfvalue    string `protobuf:"bytes,6,opt,name=cfvalue,proto3" json:"cfvalue,omitempty"`
	Orderby    int64  `protobuf:"varint,7,opt,name=orderby,proto3" json:"orderby,omitempty"`
}

func (x *UiUserconfig) Reset() {
	*x = UiUserconfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UiUserconfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UiUserconfig) ProtoMessage() {}

func (x *UiUserconfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UiUserconfig.ProtoReflect.Descriptor instead.
func (*UiUserconfig) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{64}
}

func (x *UiUserconfig) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UiUserconfig) GetEmployeeId() int64 {
	if x != nil {
		return x.EmployeeId
	}
	return 0
}

func (x *UiUserconfig) GetSection() string {
	if x != nil {
		return x.Section
	}
	return ""
}

func (x *UiUserconfig) GetCfgroup() string {
	if x != nil {
		return x.Cfgroup
	}
	return ""
}

func (x *UiUserconfig) GetCfname() string {
	if x != nil {
		return x.Cfname
	}
	return ""
}

func (x *UiUserconfig) GetCfvalue() string {
	if x != nil {
		return x.Cfvalue
	}
	return ""
}

func (x *UiUserconfig) GetOrderby() int64 {
	if x != nil {
		return x.Orderby
	}
	return 0
}

type ResponseRows_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values map[string]string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ResponseRows_Item) Reset() {
	*x = ResponseRows_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseRows_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseRows_Item) ProtoMessage() {}

func (x *ResponseRows_Item) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseRows_Item.ProtoReflect.Descriptor instead.
func (*ResponseRows_Item) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ResponseRows_Item) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

type RequestView_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Give the query a unique name
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The SQL query as a string
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// The array of parameter values
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *RequestView_Query) Reset() {
	*x = RequestView_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestView_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestView_Query) ProtoMessage() {}

func (x *RequestView_Query) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestView_Query.ProtoReflect.Descriptor instead.
func (*RequestView_Query) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{13, 0}
}

func (x *RequestView_Query) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RequestView_Query) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *RequestView_Query) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type ResponseReportList_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reportkey   string `protobuf:"bytes,1,opt,name=reportkey,proto3" json:"reportkey,omitempty"`
	Repname     string `protobuf:"bytes,2,opt,name=repname,proto3" json:"repname,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Label       string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	Reptype     string `protobuf:"bytes,5,opt,name=reptype,proto3" json:"reptype,omitempty"`
	Filename    string `protobuf:"bytes,6,opt,name=filename,proto3" json:"filename,omitempty"`
	Installed   bool   `protobuf:"varint,7,opt,name=installed,proto3" json:"installed,omitempty"`
}

func (x *ResponseReportList_Info) Reset() {
	*x = ResponseReportList_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseReportList_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseReportList_Info) ProtoMessage() {}

func (x *ResponseReportList_Info) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseReportList_Info.ProtoReflect.Descriptor instead.
func (*ResponseReportList_Info) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{19, 0}
}

func (x *ResponseReportList_Info) GetReportkey() string {
	if x != nil {
		return x.Reportkey
	}
	return ""
}

func (x *ResponseReportList_Info) GetRepname() string {
	if x != nil {
		return x.Repname
	}
	return ""
}

func (x *ResponseReportList_Info) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ResponseReportList_Info) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ResponseReportList_Info) GetReptype() string {
	if x != nil {
		return x.Reptype
	}
	return ""
}

func (x *ResponseReportList_Info) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ResponseReportList_Info) GetInstalled() bool {
	if x != nil {
		return x.Installed
	}
	return false
}

type RequestUpdate_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values map[string]*RequestField `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Keys   map[string]*RequestField `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RequestUpdate_Item) Reset() {
	*x = RequestUpdate_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestUpdate_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestUpdate_Item) ProtoMessage() {}

func (x *RequestUpdate_Item) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestUpdate_Item.ProtoReflect.Descriptor instead.
func (*RequestUpdate_Item) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{25, 0}
}

func (x *RequestUpdate_Item) GetValues() map[string]*RequestField {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *RequestUpdate_Item) GetKeys() map[string]*RequestField {
	if x != nil {
		return x.Keys
	}
	return nil
}

type ResponseGet_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ResponseGet_Value_Address
	//	*ResponseGet_Value_Barcode
	//	*ResponseGet_Value_Contact
	//	*ResponseGet_Value_Currency
	//	*ResponseGet_Value_Customer
	//	*ResponseGet_Value_Deffield
	//	*ResponseGet_Value_Employee
	//	*ResponseGet_Value_Event
	//	*ResponseGet_Value_Fieldvalue
	//	*ResponseGet_Value_Groups
	//	*ResponseGet_Value_Item
	//	*ResponseGet_Value_Link
	//	*ResponseGet_Value_Log
	//	*ResponseGet_Value_Movement
	//	*ResponseGet_Value_Numberdef
	//	*ResponseGet_Value_Pattern
	//	*ResponseGet_Value_Payment
	//	*ResponseGet_Value_Place
	//	*ResponseGet_Value_Price
	//	*ResponseGet_Value_Product
	//	*ResponseGet_Value_Project
	//	*ResponseGet_Value_Rate
	//	*ResponseGet_Value_Tax
	//	*ResponseGet_Value_Tool
	//	*ResponseGet_Value_Trans
	//	*ResponseGet_Value_UiAudit
	//	*ResponseGet_Value_UiLanguage
	//	*ResponseGet_Value_UiMenu
	//	*ResponseGet_Value_UiMenufields
	//	*ResponseGet_Value_UiMessage
	//	*ResponseGet_Value_UiPrintqueue
	//	*ResponseGet_Value_UiReport
	//	*ResponseGet_Value_UiReportfields
	//	*ResponseGet_Value_UiReportsources
	//	*ResponseGet_Value_UiUserconfig
	Value isResponseGet_Value_Value `protobuf_oneof:"value"`
}

func (x *ResponseGet_Value) Reset() {
	*x = ResponseGet_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseGet_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseGet_Value) ProtoMessage() {}

func (x *ResponseGet_Value) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseGet_Value.ProtoReflect.Descriptor instead.
func (*ResponseGet_Value) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{28, 0}
}

func (m *ResponseGet_Value) GetValue() isResponseGet_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ResponseGet_Value) GetAddress() *Address {
	if x, ok := x.GetValue().(*ResponseGet_Value_Address); ok {
		return x.Address
	}
	return nil
}

func (x *ResponseGet_Value) GetBarcode() *Barcode {
	if x, ok := x.GetValue().(*ResponseGet_Value_Barcode); ok {
		return x.Barcode
	}
	return nil
}

func (x *ResponseGet_Value) GetContact() *Contact {
	if x, ok := x.GetValue().(*ResponseGet_Value_Contact); ok {
		return x.Contact
	}
	return nil
}

func (x *ResponseGet_Value) GetCurrency() *Currency {
	if x, ok := x.GetValue().(*ResponseGet_Value_Currency); ok {
		return x.Currency
	}
	return nil
}

func (x *ResponseGet_Value) GetCustomer() *Customer {
	if x, ok := x.GetValue().(*ResponseGet_Value_Customer); ok {
		return x.Customer
	}
	return nil
}

func (x *ResponseGet_Value) GetDeffield() *Deffield {
	if x, ok := x.GetValue().(*ResponseGet_Value_Deffield); ok {
		return x.Deffield
	}
	return nil
}

func (x *ResponseGet_Value) GetEmployee() *Employee {
	if x, ok := x.GetValue().(*ResponseGet_Value_Employee); ok {
		return x.Employee
	}
	return nil
}

func (x *ResponseGet_Value) GetEvent() *Event {
	if x, ok := x.GetValue().(*ResponseGet_Value_Event); ok {
		return x.Event
	}
	return nil
}

func (x *ResponseGet_Value) GetFieldvalue() *Fieldvalue {
	if x, ok := x.GetValue().(*ResponseGet_Value_Fieldvalue); ok {
		return x.Fieldvalue
	}
	return nil
}

func (x *ResponseGet_Value) GetGroups() *Groups {
	if x, ok := x.GetValue().(*ResponseGet_Value_Groups); ok {
		return x.Groups
	}
	return nil
}

func (x *ResponseGet_Value) GetItem() *Item {
	if x, ok := x.GetValue().(*ResponseGet_Value_Item); ok {
		return x.Item
	}
	return nil
}

func (x *ResponseGet_Value) GetLink() *Link {
	if x, ok := x.GetValue().(*ResponseGet_Value_Link); ok {
		return x.Link
	}
	return nil
}

func (x *ResponseGet_Value) GetLog() *Log {
	if x, ok := x.GetValue().(*ResponseGet_Value_Log); ok {
		return x.Log
	}
	return nil
}

func (x *ResponseGet_Value) GetMovement() *Movement {
	if x, ok := x.GetValue().(*ResponseGet_Value_Movement); ok {
		return x.Movement
	}
	return nil
}

func (x *ResponseGet_Value) GetNumberdef() *Numberdef {
	if x, ok := x.GetValue().(*ResponseGet_Value_Numberdef); ok {
		return x.Numberdef
	}
	return nil
}

func (x *ResponseGet_Value) GetPattern() *Pattern {
	if x, ok := x.GetValue().(*ResponseGet_Value_Pattern); ok {
		return x.Pattern
	}
	return nil
}

func (x *ResponseGet_Value) GetPayment() *Payment {
	if x, ok := x.GetValue().(*ResponseGet_Value_Payment); ok {
		return x.Payment
	}
	return nil
}

func (x *ResponseGet_Value) GetPlace() *Place {
	if x, ok := x.GetValue().(*ResponseGet_Value_Place); ok {
		return x.Place
	}
	return nil
}

func (x *ResponseGet_Value) GetPrice() *Price {
	if x, ok := x.GetValue().(*ResponseGet_Value_Price); ok {
		return x.Price
	}
	return nil
}

func (x *ResponseGet_Value) GetProduct() *Product {
	if x, ok := x.GetValue().(*ResponseGet_Value_Product); ok {
		return x.Product
	}
	return nil
}

func (x *ResponseGet_Value) GetProject() *Project {
	if x, ok := x.GetValue().(*ResponseGet_Value_Project); ok {
		return x.Project
	}
	return nil
}

func (x *ResponseGet_Value) GetRate() *Rate {
	if x, ok := x.GetValue().(*ResponseGet_Value_Rate); ok {
		return x.Rate
	}
	return nil
}

func (x *ResponseGet_Value) GetTax() *Tax {
	if x, ok := x.GetValue().(*ResponseGet_Value_Tax); ok {
		return x.Tax
	}
	return nil
}

func (x *ResponseGet_Value) GetTool() *Tool {
	if x, ok := x.GetValue().(*ResponseGet_Value_Tool); ok {
		return x.Tool
	}
	return nil
}

func (x *ResponseGet_Value) GetTrans() *Trans {
	if x, ok := x.GetValue().(*ResponseGet_Value_Trans); ok {
		return x.Trans
	}
	return nil
}

func (x *ResponseGet_Value) GetUiAudit() *UiAudit {
	if x, ok := x.GetValue().(*ResponseGet_Value_UiAudit); ok {
		return x.UiAudit
	}
	return nil
}

func (x *ResponseGet_Value) GetUiLanguage() *UiLanguage {
	if x, ok := x.GetValue().(*ResponseGet_Value_UiLanguage); ok {
		return x.UiLanguage
	}
	return nil
}

func (x *ResponseGet_Value) GetUiMenu() *UiMenu {
	if x, ok := x.GetValue().(*ResponseGet_Value_UiMenu); ok {
		return x.UiMenu
	}
	return nil
}

func (x *ResponseGet_Value) GetUiMenufields() *UiMenufields {
	if x, ok := x.GetValue().(*ResponseGet_Value_UiMenufields); ok {
		return x.UiMenufields
	}
	return nil
}

func (x *ResponseGet_Value) GetUiMessage() *UiMessage {
	if x, ok := x.GetValue().(*ResponseGet_Value_UiMessage); ok {
		return x.UiMessage
	}
	return nil
}

func (x *ResponseGet_Value) GetUiPrintqueue() *UiPrintqueue {
	if x, ok := x.GetValue().(*ResponseGet_Value_UiPrintqueue); ok {
		return x.UiPrintqueue
	}
	return nil
}

func (x *ResponseGet_Value) GetUiReport() *UiReport {
	if x, ok := x.GetValue().(*ResponseGet_Value_UiReport); ok {
		return x.UiReport
	}
	return nil
}

func (x *ResponseGet_Value) GetUiReportfields() *UiReportfields {
	if x, ok := x.GetValue().(*ResponseGet_Value_UiReportfields); ok {
		return x.UiReportfields
	}
	return nil
}

func (x *ResponseGet_Value) GetUiReportsources() *UiReportsources {
	if x, ok := x.GetValue().(*ResponseGet_Value_UiReportsources); ok {
		return x.UiReportsources
	}
	return nil
}

func (x *ResponseGet_Value) GetUiUserconfig() *UiUserconfig {
	if x, ok := x.GetValue().(*ResponseGet_Value_UiUserconfig); ok {
		return x.UiUserconfig
	}
	return nil
}

type isResponseGet_Value_Value interface {
	isResponseGet_Value_Value()
}

type ResponseGet_Value_Address struct {
	Address *Address `protobuf:"bytes,1,opt,name=address,proto3,oneof"`
}

type ResponseGet_Value_Barcode struct {
	Barcode *Barcode `protobuf:"bytes,2,opt,name=barcode,proto3,oneof"`
}

type ResponseGet_Value_Contact struct {
	Contact *Contact `protobuf:"bytes,3,opt,name=contact,proto3,oneof"`
}

type ResponseGet_Value_Currency struct {
	Currency *Currency `protobuf:"bytes,4,opt,name=currency,proto3,oneof"`
}

type ResponseGet_Value_Customer struct {
	Customer *Customer `protobuf:"bytes,5,opt,name=customer,proto3,oneof"`
}

type ResponseGet_Value_Deffield struct {
	Deffield *Deffield `protobuf:"bytes,6,opt,name=deffield,proto3,oneof"`
}

type ResponseGet_Value_Employee struct {
	Employee *Employee `protobuf:"bytes,7,opt,name=employee,proto3,oneof"`
}

type ResponseGet_Value_Event struct {
	Event *Event `protobuf:"bytes,8,opt,name=event,proto3,oneof"`
}

type ResponseGet_Value_Fieldvalue struct {
	Fieldvalue *Fieldvalue `protobuf:"bytes,9,opt,name=fieldvalue,proto3,oneof"`
}

type ResponseGet_Value_Groups struct {
	Groups *Groups `protobuf:"bytes,10,opt,name=groups,proto3,oneof"`
}

type ResponseGet_Value_Item struct {
	Item *Item `protobuf:"bytes,11,opt,name=item,proto3,oneof"`
}

type ResponseGet_Value_Link struct {
	Link *Link `protobuf:"bytes,12,opt,name=link,proto3,oneof"`
}

type ResponseGet_Value_Log struct {
	Log *Log `protobuf:"bytes,13,opt,name=log,proto3,oneof"`
}

type ResponseGet_Value_Movement struct {
	Movement *Movement `protobuf:"bytes,14,opt,name=movement,proto3,oneof"`
}

type ResponseGet_Value_Numberdef struct {
	Numberdef *Numberdef `protobuf:"bytes,15,opt,name=numberdef,proto3,oneof"`
}

type ResponseGet_Value_Pattern struct {
	Pattern *Pattern `protobuf:"bytes,16,opt,name=pattern,proto3,oneof"`
}

type ResponseGet_Value_Payment struct {
	Payment *Payment `protobuf:"bytes,17,opt,name=payment,proto3,oneof"`
}

type ResponseGet_Value_Place struct {
	Place *Place `protobuf:"bytes,18,opt,name=place,proto3,oneof"`
}

type ResponseGet_Value_Price struct {
	Price *Price `protobuf:"bytes,19,opt,name=price,proto3,oneof"`
}

type ResponseGet_Value_Product struct {
	Product *Product `protobuf:"bytes,20,opt,name=product,proto3,oneof"`
}

type ResponseGet_Value_Project struct {
	Project *Project `protobuf:"bytes,21,opt,name=project,proto3,oneof"`
}

type ResponseGet_Value_Rate struct {
	Rate *Rate `protobuf:"bytes,22,opt,name=rate,proto3,oneof"`
}

type ResponseGet_Value_Tax struct {
	Tax *Tax `protobuf:"bytes,23,opt,name=tax,proto3,oneof"`
}

type ResponseGet_Value_Tool struct {
	Tool *Tool `protobuf:"bytes,24,opt,name=tool,proto3,oneof"`
}

type ResponseGet_Value_Trans struct {
	Trans *Trans `protobuf:"bytes,25,opt,name=trans,proto3,oneof"`
}

type ResponseGet_Value_UiAudit struct {
	UiAudit *UiAudit `protobuf:"bytes,26,opt,name=ui_audit,json=uiAudit,proto3,oneof"`
}

type ResponseGet_Value_UiLanguage struct {
	UiLanguage *UiLanguage `protobuf:"bytes,27,opt,name=ui_language,json=uiLanguage,proto3,oneof"`
}

type ResponseGet_Value_UiMenu struct {
	UiMenu *UiMenu `protobuf:"bytes,28,opt,name=ui_menu,json=uiMenu,proto3,oneof"`
}

type ResponseGet_Value_UiMenufields struct {
	UiMenufields *UiMenufields `protobuf:"bytes,29,opt,name=ui_menufields,json=uiMenufields,proto3,oneof"`
}

type ResponseGet_Value_UiMessage struct {
	UiMessage *UiMessage `protobuf:"bytes,30,opt,name=ui_message,json=uiMessage,proto3,oneof"`
}

type ResponseGet_Value_UiPrintqueue struct {
	UiPrintqueue *UiPrintqueue `protobuf:"bytes,31,opt,name=ui_printqueue,json=uiPrintqueue,proto3,oneof"`
}

type ResponseGet_Value_UiReport struct {
	UiReport *UiReport `protobuf:"bytes,32,opt,name=ui_report,json=uiReport,proto3,oneof"`
}

type ResponseGet_Value_UiReportfields struct {
	UiReportfields *UiReportfields `protobuf:"bytes,33,opt,name=ui_reportfields,json=uiReportfields,proto3,oneof"`
}

type ResponseGet_Value_UiReportsources struct {
	UiReportsources *UiReportsources `protobuf:"bytes,34,opt,name=ui_reportsources,json=uiReportsources,proto3,oneof"`
}

type ResponseGet_Value_UiUserconfig struct {
	UiUserconfig *UiUserconfig `protobuf:"bytes,35,opt,name=ui_userconfig,json=uiUserconfig,proto3,oneof"`
}

func (*ResponseGet_Value_Address) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_Barcode) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_Contact) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_Currency) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_Customer) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_Deffield) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_Employee) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_Event) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_Fieldvalue) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_Groups) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_Item) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_Link) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_Log) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_Movement) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_Numberdef) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_Pattern) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_Payment) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_Place) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_Price) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_Product) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_Project) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_Rate) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_Tax) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_Tool) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_Trans) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_UiAudit) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_UiLanguage) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_UiMenu) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_UiMenufields) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_UiMessage) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_UiPrintqueue) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_UiReport) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_UiReportfields) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_UiReportsources) isResponseGet_Value_Value() {}

func (*ResponseGet_Value_UiUserconfig) isResponseGet_Value_Value() {}

var File_api_proto protoreflect.FileDescriptor

var file_api_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x22, 0xc8, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x83, 0x01, 0x0a, 0x04,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x40, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x0e, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x0f, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x66, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x41, 0x0a, 0x11, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x22, 0x2a, 0x0a,
	0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x71, 0x0a, 0x13, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x73, 0x73, 0x22, 0x2c, 0x0a, 0x14,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x12, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x6d, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x6d, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x87, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x41, 0x0a, 0x15, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x6d, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x6d, 0x6f, 0x22, 0x4b, 0x0a, 0x16,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x6f, 0x77, 0x73,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x64, 0x0a, 0x0d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6e, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0x8c, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12,
	0x36, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x45, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x9f,
	0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12,
	0x3b, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x52, 0x0a, 0x0b,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x63, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1a, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x52, 0x0a, 0x0b, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x28, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x29, 0x0a, 0x11, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x22, 0x9b, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0xca, 0x01, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x22, 0x34, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x6b, 0x65, 0x79, 0x22, 0x27, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x33, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x6b, 0x65, 0x79, 0x22, 0xaf, 0x04, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6e, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x72,
	0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x2f, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x53, 0x0a, 0x0c, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x77, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x6f, 0x6f, 0x6c, 0x10, 0x07, 0x12, 0x09, 0x0a,
	0x05, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x10, 0x08, 0x22, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xa6, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0xac, 0x02, 0x0a, 0x04, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x41, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x1a, 0x52, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x50, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x28, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47,
	0x65, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xa0, 0x0e,
	0x0a, 0x0b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x65, 0x74, 0x12, 0x34, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x47, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x1a, 0xda, 0x0d, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a,
	0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x42, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x31, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x48, 0x00, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x31, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x08, 0x64, 0x65, 0x66, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x2e, 0x44, 0x65, 0x66, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x08, 0x64, 0x65,
	0x66, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x48,
	0x00, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x48,
	0x00, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x31, 0x0a, 0x08, 0x6d,
	0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34,
	0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x64, 0x65, 0x66, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x64, 0x65, 0x66, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x64, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x48, 0x00, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x22, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x54, 0x61, 0x78, 0x48, 0x00, 0x52, 0x03,
	0x74, 0x61, 0x78, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x6f, 0x6f, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x54, 0x6f,
	0x6f, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x74, 0x6f, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x05, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x75, 0x69, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x2e, 0x55, 0x69, 0x41, 0x75, 0x64, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x75, 0x69,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x75, 0x69, 0x5f, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x55, 0x69, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x69, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x2c, 0x0a, 0x07, 0x75, 0x69, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x55, 0x69, 0x4d,
	0x65, 0x6e, 0x75, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x3e, 0x0a,
	0x0d, 0x75, 0x69, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x55, 0x69, 0x4d, 0x65, 0x6e, 0x75, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x48, 0x00, 0x52,
	0x0c, 0x75, 0x69, 0x4d, 0x65, 0x6e, 0x75, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x35, 0x0a,
	0x0a, 0x75, 0x69, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x55, 0x69,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x75, 0x69, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x75, 0x69, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x55, 0x69, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x69, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x75, 0x69, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2e, 0x55, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x75, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x75, 0x69, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x55, 0x69,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x48, 0x00, 0x52, 0x0e,
	0x75, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x47,
	0x0a, 0x10, 0x75, 0x69, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x2e, 0x55, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x75, 0x69, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x55, 0x69, 0x55, 0x73, 0x65,
	0x72, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x69, 0x55, 0x73, 0x65,
	0x72, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x82, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x8b, 0x02, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xbc, 0x01, 0x0a, 0x07, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x66, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xb9, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x65,
	0x66, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x61, 0x78,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc9,
	0x01, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x75, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x75, 0x72, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x69, 0x67, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x64, 0x69, 0x67, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x65, 0x66, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x63, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf7, 0x02, 0x0a, 0x08, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x61, 0x78, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x78, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x61, 0x78,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x61, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x65,
	0x72, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x9c, 0x02, 0x0a, 0x08, 0x44, 0x65, 0x66, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x6e, 0x65, 0x77, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x64, 0x64, 0x6e, 0x65, 0x77, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f,
	0x6e, 0x6c, 0x79, 0x22, 0xc2, 0x02, 0x0a, 0x08, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6d, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6d, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd3, 0x02, 0x0a, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x72, 0x65, 0x66, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7d,
	0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65,
	0x66, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x94, 0x01,
	0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x22, 0xc2, 0x03, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x71,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x78, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x66, 0x78, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x74, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x76, 0x61, 0x74,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x77,
	0x6e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x77,
	0x6e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbd, 0x01, 0x0a, 0x04, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x31, 0x12, 0x18, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x5f, 0x31, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x66, 0x49, 0x64, 0x31, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x79, 0x70, 0x65, 0x32, 0x12, 0x18,
	0x0a, 0x08, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x5f, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x72, 0x65, 0x66, 0x49, 0x64, 0x32, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd0, 0x01, 0x0a, 0x03, 0x4c, 0x6f,
	0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x72, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc5, 0x02, 0x0a,
	0x08, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x76, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x9b, 0x02, 0x0a, 0x09, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x64,
	0x65, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6b, 0x65, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x75, 0x72, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x79, 0x65, 0x61, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x79, 0x65, 0x61, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6c, 0x65, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x62, 0x79, 0x22, 0x8f, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x22, 0xaf, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x69, 0x64, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x69, 0x64, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x88, 0x02, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x75, 0x72, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x75,
	0x72, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x66, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x65, 0x66, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x87, 0x02, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x75, 0x72, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x75, 0x72, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9d, 0x02, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6d, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x95, 0x02, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xea, 0x01, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x61, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x72, 0x61, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x75, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x75, 0x72, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xb2, 0x01, 0x0a, 0x03, 0x54, 0x61, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x78, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf0, 0x01, 0x0a, 0x04, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x6f, 0x6c,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xab, 0x05, 0x0a, 0x05, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x72, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x75, 0x65, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x69, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x69, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x75, 0x72, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x75, 0x72, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x61, 0x78, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x72, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x61, 0x63, 0x72, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6e, 0x6f, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb1, 0x01, 0x0a, 0x07, 0x55, 0x69, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x22, 0x52, 0x0a, 0x0a, 0x55, 0x69,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc6,
	0x01, 0x0a, 0x06, 0x55, 0x69, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6e,
	0x75, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x6e, 0x75,
	0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x0c, 0x55, 0x69, 0x4d, 0x65,
	0x6e, 0x75, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x65, 0x6e, 0x75,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6e, 0x75, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x79, 0x22, 0x79, 0x0a, 0x09, 0x55, 0x69, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x22, 0xbb, 0x01, 0x0a, 0x0c, 0x55, 0x69, 0x50, 0x72, 0x69, 0x6e, 0x74,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x72, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x98, 0x02, 0x0a, 0x08, 0x55, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xdd, 0x02,
	0x0a, 0x0e, 0x55, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x68, 0x65,
	0x72, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x62, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x71, 0x6c, 0x73, 0x74, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x71, 0x6c, 0x73, 0x74, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x66, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x66, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x70, 0x0a,
	0x0f, 0x55, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x71, 0x6c, 0x73, 0x74,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x71, 0x6c, 0x73, 0x74, 0x72, 0x22,
	0xbf, 0x01, 0x0a, 0x0c, 0x55, 0x69, 0x55, 0x73, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x66, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x66,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x66, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x66, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62,
	0x79, 0x2a, 0xeb, 0x03, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x10,
	0x04, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x65, 0x66, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x10, 0x05, 0x12,
	0x0c, 0x0a, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x10, 0x06, 0x12, 0x09, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x10, 0x0a, 0x12, 0x08,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x10,
	0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x0d, 0x12,
	0x0d, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x64, 0x65, 0x66, 0x10, 0x0e, 0x12, 0x0b,
	0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x10, 0x12, 0x09, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x10, 0x11, 0x12, 0x09, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x10, 0x12, 0x12, 0x0b,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x10, 0x13, 0x12, 0x0b, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x14, 0x12, 0x08, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x10, 0x15, 0x12, 0x07, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x10, 0x16, 0x12, 0x08, 0x0a, 0x04, 0x74,
	0x6f, 0x6f, 0x6c, 0x10, 0x17, 0x12, 0x09, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x10, 0x18,
	0x12, 0x0c, 0x0a, 0x08, 0x75, 0x69, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x10, 0x19, 0x12, 0x0f,
	0x0a, 0x0b, 0x75, 0x69, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x10, 0x1a, 0x12,
	0x0b, 0x0a, 0x07, 0x75, 0x69, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x10, 0x1b, 0x12, 0x11, 0x0a, 0x0d,
	0x75, 0x69, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x10, 0x1c, 0x12,
	0x0e, 0x0a, 0x0a, 0x75, 0x69, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x1d, 0x12,
	0x11, 0x0a, 0x0d, 0x75, 0x69, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x10, 0x1e, 0x12, 0x0d, 0x0a, 0x09, 0x75, 0x69, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x10,
	0x1f, 0x12, 0x13, 0x0a, 0x0f, 0x75, 0x69, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x10, 0x20, 0x12, 0x14, 0x0a, 0x10, 0x75, 0x69, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x10, 0x21, 0x12, 0x11, 0x0a, 0x0d,
	0x75, 0x69, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x22, 0x2a,
	0x30, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x10,
	0x01, 0x2a, 0x3b, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x06, 0x0a, 0x02, 0x61, 0x33, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x61, 0x34, 0x10, 0x01, 0x12,
	0x06, 0x0a, 0x02, 0x61, 0x35, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x10, 0x04, 0x2a, 0x2b,
	0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x08,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x78, 0x6d, 0x6c, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x10, 0x02, 0x32, 0xc3, 0x08, 0x0a, 0x03,
	0x41, 0x50, 0x49, 0x12, 0x48, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x1b, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x1c, 0x2e,
	0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x00, 0x12, 0x4a, 0x0a,
	0x0c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x2e,
	0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x18, 0x2e,
	0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0a, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1d, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x22,
	0x00, 0x12, 0x4a, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x12, 0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x22, 0x00, 0x12, 0x4e, 0x0a,
	0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x2e, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x1e, 0x2e, 0x6e, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x1a, 0x16, 0x2e, 0x6e, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x47, 0x65, 0x74, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x19, 0x2e, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x18, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x18, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x16,
	0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x1a, 0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x69, 0x65, 0x77, 0x22,
	0x00, 0x12, 0x45, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e,
	0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x18, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x19, 0x2e, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0a, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x1f, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x1a, 0x20, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0c,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x18, 0x2e, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x21, 0x2e, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x22,
	0x00, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2f, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_rawDescOnce sync.Once
	file_api_proto_rawDescData = file_api_proto_rawDesc
)

func file_api_proto_rawDescGZIP() []byte {
	file_api_proto_rawDescOnce.Do(func() {
		file_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_rawDescData)
	})
	return file_api_proto_rawDescData
}

var file_api_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_api_proto_msgTypes = make([]protoimpl.MessageInfo, 76)
var file_api_proto_goTypes = []interface{}{
	(DataType)(0),                   // 0: nervatura.DataType
	(ReportOrientation)(0),          // 1: nervatura.ReportOrientation
	(ReportSize)(0),                 // 2: nervatura.ReportSize
	(ReportOutput)(0),               // 3: nervatura.ReportOutput
	(RequestReport_ReportType)(0),   // 4: nervatura.RequestReport.ReportType
	(*ResponseRows)(nil),            // 5: nervatura.ResponseRows
	(*RequestEmpty)(nil),            // 6: nervatura.RequestEmpty
	(*ResponseEmpty)(nil),           // 7: nervatura.ResponseEmpty
	(*RequestUserLogin)(nil),        // 8: nervatura.RequestUserLogin
	(*ResponseUserLogin)(nil),       // 9: nervatura.ResponseUserLogin
	(*RequestTokenDecode)(nil),      // 10: nervatura.RequestTokenDecode
	(*ResponseTokenDecode)(nil),     // 11: nervatura.ResponseTokenDecode
	(*ResponseTokenRefresh)(nil),    // 12: nervatura.ResponseTokenRefresh
	(*ResponseTokenLogin)(nil),      // 13: nervatura.ResponseTokenLogin
	(*RequestUserPassword)(nil),     // 14: nervatura.RequestUserPassword
	(*RequestDatabaseCreate)(nil),   // 15: nervatura.RequestDatabaseCreate
	(*ResponseDatabaseCreate)(nil),  // 16: nervatura.ResponseDatabaseCreate
	(*RequestDelete)(nil),           // 17: nervatura.RequestDelete
	(*RequestView)(nil),             // 18: nervatura.RequestView
	(*ResponseView)(nil),            // 19: nervatura.ResponseView
	(*RequestField)(nil),            // 20: nervatura.RequestField
	(*RequestFunction)(nil),         // 21: nervatura.RequestFunction
	(*ResponseFunction)(nil),        // 22: nervatura.ResponseFunction
	(*RequestReportList)(nil),       // 23: nervatura.RequestReportList
	(*ResponseReportList)(nil),      // 24: nervatura.ResponseReportList
	(*RequestReportInstall)(nil),    // 25: nervatura.RequestReportInstall
	(*ResponseReportInstall)(nil),   // 26: nervatura.ResponseReportInstall
	(*RequestReportDelete)(nil),     // 27: nervatura.RequestReportDelete
	(*RequestReport)(nil),           // 28: nervatura.RequestReport
	(*ResponseReport)(nil),          // 29: nervatura.ResponseReport
	(*RequestUpdate)(nil),           // 30: nervatura.RequestUpdate
	(*ResponseUpdate)(nil),          // 31: nervatura.ResponseUpdate
	(*RequestGet)(nil),              // 32: nervatura.RequestGet
	(*ResponseGet)(nil),             // 33: nervatura.ResponseGet
	(*MetaData)(nil),                // 34: nervatura.MetaData
	(*Address)(nil),                 // 35: nervatura.Address
	(*Barcode)(nil),                 // 36: nervatura.Barcode
	(*Contact)(nil),                 // 37: nervatura.Contact
	(*Currency)(nil),                // 38: nervatura.Currency
	(*Customer)(nil),                // 39: nervatura.Customer
	(*Deffield)(nil),                // 40: nervatura.Deffield
	(*Employee)(nil),                // 41: nervatura.Employee
	(*Event)(nil),                   // 42: nervatura.Event
	(*Fieldvalue)(nil),              // 43: nervatura.Fieldvalue
	(*Groups)(nil),                  // 44: nervatura.Groups
	(*Item)(nil),                    // 45: nervatura.Item
	(*Link)(nil),                    // 46: nervatura.Link
	(*Log)(nil),                     // 47: nervatura.Log
	(*Movement)(nil),                // 48: nervatura.Movement
	(*Numberdef)(nil),               // 49: nervatura.Numberdef
	(*Pattern)(nil),                 // 50: nervatura.Pattern
	(*Payment)(nil),                 // 51: nervatura.Payment
	(*Place)(nil),                   // 52: nervatura.Place
	(*Price)(nil),                   // 53: nervatura.Price
	(*Product)(nil),                 // 54: nervatura.Product
	(*Project)(nil),                 // 55: nervatura.Project
	(*Rate)(nil),                    // 56: nervatura.Rate
	(*Tax)(nil),                     // 57: nervatura.Tax
	(*Tool)(nil),                    // 58: nervatura.Tool
	(*Trans)(nil),                   // 59: nervatura.Trans
	(*UiAudit)(nil),                 // 60: nervatura.UiAudit
	(*UiLanguage)(nil),              // 61: nervatura.UiLanguage
	(*UiMenu)(nil),                  // 62: nervatura.UiMenu
	(*UiMenufields)(nil),            // 63: nervatura.UiMenufields
	(*UiMessage)(nil),               // 64: nervatura.UiMessage
	(*UiPrintqueue)(nil),            // 65: nervatura.UiPrintqueue
	(*UiReport)(nil),                // 66: nervatura.UiReport
	(*UiReportfields)(nil),          // 67: nervatura.UiReportfields
	(*UiReportsources)(nil),         // 68: nervatura.UiReportsources
	(*UiUserconfig)(nil),            // 69: nervatura.UiUserconfig
	(*ResponseRows_Item)(nil),       // 70: nervatura.ResponseRows.Item
	nil,                             // 71: nervatura.ResponseRows.Item.ValuesEntry
	(*RequestView_Query)(nil),       // 72: nervatura.RequestView.Query
	nil,                             // 73: nervatura.ResponseView.ValuesEntry
	nil,                             // 74: nervatura.RequestFunction.ValuesEntry
	(*ResponseReportList_Info)(nil), // 75: nervatura.ResponseReportList.Info
	nil,                             // 76: nervatura.RequestReport.FiltersEntry
	(*RequestUpdate_Item)(nil),      // 77: nervatura.RequestUpdate.Item
	nil,                             // 78: nervatura.RequestUpdate.Item.ValuesEntry
	nil,                             // 79: nervatura.RequestUpdate.Item.KeysEntry
	(*ResponseGet_Value)(nil),       // 80: nervatura.ResponseGet.Value
}
var file_api_proto_depIdxs = []int32{
	70, // 0: nervatura.ResponseRows.items:type_name -> nervatura.ResponseRows.Item
	5,  // 1: nervatura.ResponseDatabaseCreate.details:type_name -> nervatura.ResponseRows
	0,  // 2: nervatura.RequestDelete.nervatype:type_name -> nervatura.DataType
	72, // 3: nervatura.RequestView.options:type_name -> nervatura.RequestView.Query
	73, // 4: nervatura.ResponseView.values:type_name -> nervatura.ResponseView.ValuesEntry
	74, // 5: nervatura.RequestFunction.values:type_name -> nervatura.RequestFunction.ValuesEntry
	75, // 6: nervatura.ResponseReportList.items:type_name -> nervatura.ResponseReportList.Info
	1,  // 7: nervatura.RequestReport.orientation:type_name -> nervatura.ReportOrientation
	2,  // 8: nervatura.RequestReport.size:type_name -> nervatura.ReportSize
	3,  // 9: nervatura.RequestReport.output:type_name -> nervatura.ReportOutput
	4,  // 10: nervatura.RequestReport.type:type_name -> nervatura.RequestReport.ReportType
	76, // 11: nervatura.RequestReport.filters:type_name -> nervatura.RequestReport.FiltersEntry
	0,  // 12: nervatura.RequestUpdate.nervatype:type_name -> nervatura.DataType
	77, // 13: nervatura.RequestUpdate.items:type_name -> nervatura.RequestUpdate.Item
	0,  // 14: nervatura.RequestGet.nervatype:type_name -> nervatura.DataType
	80, // 15: nervatura.ResponseGet.values:type_name -> nervatura.ResponseGet.Value
	34, // 16: nervatura.Address.metadata:type_name -> nervatura.MetaData
	34, // 17: nervatura.Contact.metadata:type_name -> nervatura.MetaData
	34, // 18: nervatura.Currency.metadata:type_name -> nervatura.MetaData
	34, // 19: nervatura.Customer.metadata:type_name -> nervatura.MetaData
	34, // 20: nervatura.Employee.metadata:type_name -> nervatura.MetaData
	34, // 21: nervatura.Event.metadata:type_name -> nervatura.MetaData
	34, // 22: nervatura.Item.metadata:type_name -> nervatura.MetaData
	34, // 23: nervatura.Link.metadata:type_name -> nervatura.MetaData
	34, // 24: nervatura.Log.metadata:type_name -> nervatura.MetaData
	34, // 25: nervatura.Movement.metadata:type_name -> nervatura.MetaData
	34, // 26: nervatura.Payment.metadata:type_name -> nervatura.MetaData
	34, // 27: nervatura.Place.metadata:type_name -> nervatura.MetaData
	34, // 28: nervatura.Price.metadata:type_name -> nervatura.MetaData
	34, // 29: nervatura.Product.metadata:type_name -> nervatura.MetaData
	34, // 30: nervatura.Project.metadata:type_name -> nervatura.MetaData
	34, // 31: nervatura.Rate.metadata:type_name -> nervatura.MetaData
	34, // 32: nervatura.Tax.metadata:type_name -> nervatura.MetaData
	34, // 33: nervatura.Tool.metadata:type_name -> nervatura.MetaData
	34, // 34: nervatura.Trans.metadata:type_name -> nervatura.MetaData
	71, // 35: nervatura.ResponseRows.Item.values:type_name -> nervatura.ResponseRows.Item.ValuesEntry
	5,  // 36: nervatura.ResponseView.ValuesEntry.value:type_name -> nervatura.ResponseRows
	20, // 37: nervatura.RequestFunction.ValuesEntry.value:type_name -> nervatura.RequestField
	20, // 38: nervatura.RequestReport.FiltersEntry.value:type_name -> nervatura.RequestField
	78, // 39: nervatura.RequestUpdate.Item.values:type_name -> nervatura.RequestUpdate.Item.ValuesEntry
	79, // 40: nervatura.RequestUpdate.Item.keys:type_name -> nervatura.RequestUpdate.Item.KeysEntry
	20, // 41: nervatura.RequestUpdate.Item.ValuesEntry.value:type_name -> nervatura.RequestField
	20, // 42: nervatura.RequestUpdate.Item.KeysEntry.value:type_name -> nervatura.RequestField
	35, // 43: nervatura.ResponseGet.Value.address:type_name -> nervatura.Address
	36, // 44: nervatura.ResponseGet.Value.barcode:type_name -> nervatura.Barcode
	37, // 45: nervatura.ResponseGet.Value.contact:type_name -> nervatura.Contact
	38, // 46: nervatura.ResponseGet.Value.currency:type_name -> nervatura.Currency
	39, // 47: nervatura.ResponseGet.Value.customer:type_name -> nervatura.Customer
	40, // 48: nervatura.ResponseGet.Value.deffield:type_name -> nervatura.Deffield
	41, // 49: nervatura.ResponseGet.Value.employee:type_name -> nervatura.Employee
	42, // 50: nervatura.ResponseGet.Value.event:type_name -> nervatura.Event
	43, // 51: nervatura.ResponseGet.Value.fieldvalue:type_name -> nervatura.Fieldvalue
	44, // 52: nervatura.ResponseGet.Value.groups:type_name -> nervatura.Groups
	45, // 53: nervatura.ResponseGet.Value.item:type_name -> nervatura.Item
	46, // 54: nervatura.ResponseGet.Value.link:type_name -> nervatura.Link
	47, // 55: nervatura.ResponseGet.Value.log:type_name -> nervatura.Log
	48, // 56: nervatura.ResponseGet.Value.movement:type_name -> nervatura.Movement
	49, // 57: nervatura.ResponseGet.Value.numberdef:type_name -> nervatura.Numberdef
	50, // 58: nervatura.ResponseGet.Value.pattern:type_name -> nervatura.Pattern
	51, // 59: nervatura.ResponseGet.Value.payment:type_name -> nervatura.Payment
	52, // 60: nervatura.ResponseGet.Value.place:type_name -> nervatura.Place
	53, // 61: nervatura.ResponseGet.Value.price:type_name -> nervatura.Price
	54, // 62: nervatura.ResponseGet.Value.product:type_name -> nervatura.Product
	55, // 63: nervatura.ResponseGet.Value.project:type_name -> nervatura.Project
	56, // 64: nervatura.ResponseGet.Value.rate:type_name -> nervatura.Rate
	57, // 65: nervatura.ResponseGet.Value.tax:type_name -> nervatura.Tax
	58, // 66: nervatura.ResponseGet.Value.tool:type_name -> nervatura.Tool
	59, // 67: nervatura.ResponseGet.Value.trans:type_name -> nervatura.Trans
	60, // 68: nervatura.ResponseGet.Value.ui_audit:type_name -> nervatura.UiAudit
	61, // 69: nervatura.ResponseGet.Value.ui_language:type_name -> nervatura.UiLanguage
	62, // 70: nervatura.ResponseGet.Value.ui_menu:type_name -> nervatura.UiMenu
	63, // 71: nervatura.ResponseGet.Value.ui_menufields:type_name -> nervatura.UiMenufields
	64, // 72: nervatura.ResponseGet.Value.ui_message:type_name -> nervatura.UiMessage
	65, // 73: nervatura.ResponseGet.Value.ui_printqueue:type_name -> nervatura.UiPrintqueue
	66, // 74: nervatura.ResponseGet.Value.ui_report:type_name -> nervatura.UiReport
	67, // 75: nervatura.ResponseGet.Value.ui_reportfields:type_name -> nervatura.UiReportfields
	68, // 76: nervatura.ResponseGet.Value.ui_reportsources:type_name -> nervatura.UiReportsources
	69, // 77: nervatura.ResponseGet.Value.ui_userconfig:type_name -> nervatura.UiUserconfig
	8,  // 78: nervatura.API.UserLogin:input_type -> nervatura.RequestUserLogin
	14, // 79: nervatura.API.UserPassword:input_type -> nervatura.RequestUserPassword
	6,  // 80: nervatura.API.TokenLogin:input_type -> nervatura.RequestEmpty
	6,  // 81: nervatura.API.TokenRefresh:input_type -> nervatura.RequestEmpty
	10, // 82: nervatura.API.TokenDecode:input_type -> nervatura.RequestTokenDecode
	32, // 83: nervatura.API.Get:input_type -> nervatura.RequestGet
	30, // 84: nervatura.API.Update:input_type -> nervatura.RequestUpdate
	17, // 85: nervatura.API.Delete:input_type -> nervatura.RequestDelete
	18, // 86: nervatura.API.View:input_type -> nervatura.RequestView
	21, // 87: nervatura.API.Function:input_type -> nervatura.RequestFunction
	28, // 88: nervatura.API.Report:input_type -> nervatura.RequestReport
	23, // 89: nervatura.API.ReportList:input_type -> nervatura.RequestReportList
	25, // 90: nervatura.API.ReportInstall:input_type -> nervatura.RequestReportInstall
	27, // 91: nervatura.API.ReportDelete:input_type -> nervatura.RequestReportDelete
	15, // 92: nervatura.API.DatabaseCreate:input_type -> nervatura.RequestDatabaseCreate
	9,  // 93: nervatura.API.UserLogin:output_type -> nervatura.ResponseUserLogin
	7,  // 94: nervatura.API.UserPassword:output_type -> nervatura.ResponseEmpty
	13, // 95: nervatura.API.TokenLogin:output_type -> nervatura.ResponseTokenLogin
	12, // 96: nervatura.API.TokenRefresh:output_type -> nervatura.ResponseTokenRefresh
	11, // 97: nervatura.API.TokenDecode:output_type -> nervatura.ResponseTokenDecode
	33, // 98: nervatura.API.Get:output_type -> nervatura.ResponseGet
	31, // 99: nervatura.API.Update:output_type -> nervatura.ResponseUpdate
	7,  // 100: nervatura.API.Delete:output_type -> nervatura.ResponseEmpty
	19, // 101: nervatura.API.View:output_type -> nervatura.ResponseView
	22, // 102: nervatura.API.Function:output_type -> nervatura.ResponseFunction
	29, // 103: nervatura.API.Report:output_type -> nervatura.ResponseReport
	24, // 104: nervatura.API.ReportList:output_type -> nervatura.ResponseReportList
	26, // 105: nervatura.API.ReportInstall:output_type -> nervatura.ResponseReportInstall
	7,  // 106: nervatura.API.ReportDelete:output_type -> nervatura.ResponseEmpty
	16, // 107: nervatura.API.DatabaseCreate:output_type -> nervatura.ResponseDatabaseCreate
	93, // [93:108] is the sub-list for method output_type
	78, // [78:93] is the sub-list for method input_type
	78, // [78:78] is the sub-list for extension type_name
	78, // [78:78] is the sub-list for extension extendee
	0,  // [0:78] is the sub-list for field type_name
}

func init() { file_api_proto_init() }
func file_api_proto_init() {
	if File_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseRows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestEmpty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseEmpty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestUserLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseUserLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestTokenDecode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTokenDecode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTokenRefresh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTokenLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestUserPassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestDatabaseCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseDatabaseCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestReportList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseReportList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestReportInstall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseReportInstall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestReportDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Barcode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Customer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deffield); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Employee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fieldvalue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Groups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Movement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Numberdef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Place); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Price); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tax); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UiAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UiLanguage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UiMenu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UiMenufields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UiMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UiPrintqueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UiReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UiReportfields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UiReportsources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UiUserconfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseRows_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestView_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseReportList_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestUpdate_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseGet_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*RequestField_Boolean)(nil),
		(*RequestField_Number)(nil),
		(*RequestField_Text)(nil),
	}
	file_api_proto_msgTypes[75].OneofWrappers = []interface{}{
		(*ResponseGet_Value_Address)(nil),
		(*ResponseGet_Value_Barcode)(nil),
		(*ResponseGet_Value_Contact)(nil),
		(*ResponseGet_Value_Currency)(nil),
		(*ResponseGet_Value_Customer)(nil),
		(*ResponseGet_Value_Deffield)(nil),
		(*ResponseGet_Value_Employee)(nil),
		(*ResponseGet_Value_Event)(nil),
		(*ResponseGet_Value_Fieldvalue)(nil),
		(*ResponseGet_Value_Groups)(nil),
		(*ResponseGet_Value_Item)(nil),
		(*ResponseGet_Value_Link)(nil),
		(*ResponseGet_Value_Log)(nil),
		(*ResponseGet_Value_Movement)(nil),
		(*ResponseGet_Value_Numberdef)(nil),
		(*ResponseGet_Value_Pattern)(nil),
		(*ResponseGet_Value_Payment)(nil),
		(*ResponseGet_Value_Place)(nil),
		(*ResponseGet_Value_Price)(nil),
		(*ResponseGet_Value_Product)(nil),
		(*ResponseGet_Value_Project)(nil),
		(*ResponseGet_Value_Rate)(nil),
		(*ResponseGet_Value_Tax)(nil),
		(*ResponseGet_Value_Tool)(nil),
		(*ResponseGet_Value_Trans)(nil),
		(*ResponseGet_Value_UiAudit)(nil),
		(*ResponseGet_Value_UiLanguage)(nil),
		(*ResponseGet_Value_UiMenu)(nil),
		(*ResponseGet_Value_UiMenufields)(nil),
		(*ResponseGet_Value_UiMessage)(nil),
		(*ResponseGet_Value_UiPrintqueue)(nil),
		(*ResponseGet_Value_UiReport)(nil),
		(*ResponseGet_Value_UiReportfields)(nil),
		(*ResponseGet_Value_UiReportsources)(nil),
		(*ResponseGet_Value_UiUserconfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   76,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_goTypes,
		DependencyIndexes: file_api_proto_depIdxs,
		EnumInfos:         file_api_proto_enumTypes,
		MessageInfos:      file_api_proto_msgTypes,
	}.Build()
	File_api_proto = out.File
	file_api_proto_rawDesc = nil
	file_api_proto_goTypes = nil
	file_api_proto_depIdxs = nil
}
